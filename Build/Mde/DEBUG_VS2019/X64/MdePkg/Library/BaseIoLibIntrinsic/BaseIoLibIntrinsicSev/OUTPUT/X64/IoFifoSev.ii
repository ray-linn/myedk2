#line 1 "d:\\edk2\\edk2\\MdePkg\\Library\\BaseIoLibIntrinsic\\X64\\IoFifoSev.nasm"
#line 1 "d:\\edk2\\edk2\\Build\\Mde\\DEBUG_VS2019\\X64\\MdePkg\\Library\\BaseIoLibIntrinsic\\BaseIoLibIntrinsicSev\\DEBUG\\AutoGen.h"















#line 1 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"




















#line 1 "d:\\edk2\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"




















  #pragma pack()
#line 23 "d:\\edk2\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"













#line 37 "d:\\edk2\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"


























#line 64 "d:\\edk2\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"











  #pragma warning ( disable : 4214 )




  #pragma warning ( disable : 4100 )





  #pragma warning ( disable : 4057 )




  #pragma warning ( disable : 4127 )




  #pragma warning ( disable : 4505 )




  #pragma warning ( disable : 4206 )

  









    #pragma warning ( disable : 4701 )





    #pragma warning ( disable : 4703 )

  #line 122 "d:\\edk2\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"

#line 124 "d:\\edk2\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"









typedef unsigned __int64 UINT64;



typedef __int64 INT64;



typedef unsigned __int32 UINT32;



typedef __int32 INT32;



typedef unsigned short UINT16;




typedef unsigned short CHAR16;



typedef short INT16;




typedef unsigned char BOOLEAN;



typedef unsigned char UINT8;



typedef char CHAR8;



typedef signed char INT8;















































#line 224 "d:\\edk2\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"





typedef UINT64 UINTN;




typedef INT64 INTN;












































































#line 312 "d:\\edk2\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"







#line 320 "d:\\edk2\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"















#line 336 "d:\\edk2\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"

#line 338 "d:\\edk2\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"
#line 22 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"





  #pragma warning ( disable : 4200 )
#line 29 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"













#line 43 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"






#line 50 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"






  













#line 71 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"

  





  #line 79 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"
#line 80 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"







  






#line 95 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"






  






#line 109 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"
#line 110 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"






  









  





  #line 133 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"
#line 134 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"








  









  





  #line 159 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"
#line 160 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"






  





#line 173 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"





  #line 179 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"
#line 180 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"

























#line 206 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"









#line 216 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"





typedef struct {
  UINT32    Data1;
  UINT16    Data2;
  UINT16    Data3;
  UINT8     Data4[8];
} GUID;




typedef struct {
  UINT8    Addr[4];
} IPv4_ADDRESS;




typedef struct {
  UINT8    Addr[16];
} IPv6_ADDRESS;




typedef UINT64 PHYSICAL_ADDRESS;




typedef struct _LIST_ENTRY LIST_ENTRY;




struct _LIST_ENTRY {
  LIST_ENTRY    *ForwardLink;
  LIST_ENTRY    *BackLink;
};


































































































































































































































































































































































#line 614 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"











#line 626 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"












































#line 671 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"




typedef CHAR8 *VA_LIST;






























































#line 739 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"




typedef UINTN *BASE_LIST;











































#line 788 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"



#line 792 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"















#line 808 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"






static_assert (sizeof (BOOLEAN) == 1, "sizeof (BOOLEAN) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (INT8)    == 1, "sizeof (INT8) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (UINT8)   == 1, "sizeof (UINT8) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (INT16)   == 2, "sizeof (INT16) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (UINT16)  == 2, "sizeof (UINT16) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (INT32)   == 4, "sizeof (INT32) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (UINT32)  == 4, "sizeof (UINT32) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (INT64)   == 8, "sizeof (INT64) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (UINT64)  == 8, "sizeof (UINT64) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (CHAR8)   == 1, "sizeof (CHAR8) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (CHAR16)  == 2, "sizeof (CHAR16) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (L'A')    == 2, "sizeof (L'A') does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (L"A")    == 4, "sizeof (L\"A\") does not meet UEFI Specification Data Type requirements");








typedef enum {
  __VerifyUint8EnumValue = 0xff
} __VERIFY_UINT8_ENUM_SIZE;

typedef enum {
  __VerifyUint16EnumValue = 0xffff
} __VERIFY_UINT16_ENUM_SIZE;

typedef enum {
  __VerifyUint32EnumValue = 0xffffffff
} __VERIFY_UINT32_ENUM_SIZE;

static_assert (sizeof (__VERIFY_UINT8_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (__VERIFY_UINT16_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (__VERIFY_UINT32_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
















































































































typedef UINTN RETURN_STATUS;










































































































































































































































































































void *
_ReturnAddress (
  void
  );

  #pragma intrinsic(_ReturnAddress)







































#line 1307 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"














#line 1322 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"
#line 17 "d:\\edk2\\edk2\\Build\\Mde\\DEBUG_VS2019\\X64\\MdePkg\\Library\\BaseIoLibIntrinsic\\BaseIoLibIntrinsicSev\\DEBUG\\AutoGen.h"

extern GUID  gEfiCallerIdGuid;
extern GUID  gEdkiiDscPlatformGuid;
extern CHAR8 *gEfiCallerBaseName;



extern UINT64 _gPcd_SkuId_Array[];






#line 32 "d:\\edk2\\edk2\\Build\\Mde\\DEBUG_VS2019\\X64\\MdePkg\\Library\\BaseIoLibIntrinsic\\BaseIoLibIntrinsicSev\\DEBUG\\AutoGen.h"
#line 1 "d:\\edk2\\edk2\\MdePkg\\Library\\BaseIoLibIntrinsic\\X64\\IoFifoSev.nasm"
;------------------------------------------------------------------------------
;
; Copyright (c) 2006 - 2012, Intel Corporation. All rights reserved.<BR>
; Copyright (c) 2017, AMD Incorporated. All rights reserved.<BR>
;
; SPDX-License-Identifier: BSD-2-Clause-Patent
;
;------------------------------------------------------------------------------

    DEFAULT REL
    SECTION .text

;------------------------------------------------------------------------------
; Check whether we need to unroll the String I/O in SEV guest
;
; Return 
;------------------------------------------------------------------------------
global SevNoRepIo
SevNoRepIo:

  ; CPUID clobbers ebx, ecx and edx
  push      rbx
  push      rcx
  push      rdx

  ; Check if we are runing under hypervisor
  ; CPUID(1).ECX Bit 31
  mov       eax, 1
  cpuid
  bt        ecx, 31
  jnc       @UseRepIo

  ; Check if we have Memory encryption CPUID leaf
  mov       eax, 0x80000000
  cpuid
  cmp       eax, 0x8000001f
  jl        @UseRepIo

  ; Check for memory encryption feature:
  ;  CPUID  Fn8000_001F[EAX] - Bit 1
  ;
  mov       eax,  0x8000001f
  cpuid
  bt        eax, 1
  jnc       @UseRepIo

  ; Check if memory encryption is enabled
  ;  MSR_0xC0010131 - Bit 0 (SEV enabled)
  ;  MSR_0xC0010131 - Bit 1 (SEV-ES enabled)
  mov       ecx, 0xc0010131
  rdmsr

  ; Check for (SevEsEnabled == 0 && SevEnabled == 1)
  and       eax, 3
  cmp       eax, 1
  je        @SevNoRepIo_Done

@UseRepIo:
  xor       eax, eax

@SevNoRepIo_Done:
  pop       rdx
  pop       rcx
  pop       rbx
  ret

;------------------------------------------------------------------------------
;  void
;  __cdecl
;  IoReadFifo8 (
;      UINTN                 Port,              
;      UINTN                 Size,              
;     void                  *Buffer            
;    );
;------------------------------------------------------------------------------
global IoReadFifo8
IoReadFifo8:
    xchg    rcx, rdx
    xchg    rdi, r8             ; rdi: buffer address; r8: save rdi

    ; Check if we need to unroll String I/O
    call    SevNoRepIo
    test    eax, eax
    jnz     @IoReadFifo8_NoRep

    cld
    rep     insb
    jmp     @IoReadFifo8_Done

@IoReadFifo8_NoRep:
    jrcxz   @IoReadFifo8_Done

@IoReadFifo8_Loop:
    in      al, dx
    mov     byte [rdi], al
    inc     rdi
    loop    @IoReadFifo8_Loop

@IoReadFifo8_Done:
    mov     rdi, r8             ; restore rdi
    ret

;------------------------------------------------------------------------------
;  void
;  __cdecl
;  IoReadFifo16 (
;      UINTN                 Port,              
;      UINTN                 Size,              
;     void                  *Buffer            
;    );
;------------------------------------------------------------------------------
global IoReadFifo16
IoReadFifo16:
    xchg    rcx, rdx
    xchg    rdi, r8             ; rdi: buffer address; r8: save rdi

    ; Check if we need to unroll String I/O
    call    SevNoRepIo
    test    eax, eax
    jnz     @IoReadFifo16_NoRep

    cld
    rep     insw
    jmp     @IoReadFifo16_Done

@IoReadFifo16_NoRep:
    jrcxz   @IoReadFifo16_Done

@IoReadFifo16_Loop:
    in      ax, dx
    mov     word [rdi], ax
    add     rdi, 2
    loop    @IoReadFifo16_Loop

@IoReadFifo16_Done:
    mov     rdi, r8             ; restore rdi
    ret

;------------------------------------------------------------------------------
;  void
;  __cdecl
;  IoReadFifo32 (
;      UINTN                 Port,              
;      UINTN                 Size,              
;     void                  *Buffer            
;    );
;------------------------------------------------------------------------------
global IoReadFifo32
IoReadFifo32:
    xchg    rcx, rdx
    xchg    rdi, r8             ; rdi: buffer address; r8: save rdi

    ; Check if we need to unroll String I/O
    call    SevNoRepIo
    test    eax, eax
    jnz     @IoReadFifo32_NoRep

    cld
    rep     insd
    jmp     @IoReadFifo32_Done

@IoReadFifo32_NoRep:
    jrcxz   @IoReadFifo32_Done

@IoReadFifo32_Loop:
    in      eax, dx
    mov     dword [rdi], eax
    add     rdi, 4
    loop    @IoReadFifo32_Loop

@IoReadFifo32_Done:
    mov     rdi, r8             ; restore rdi
    ret

;------------------------------------------------------------------------------
;  void
;  __cdecl
;  IoWriteFifo8 (
;     UINTN                  Port,              
;     UINTN                  Size,              
;     void                   *Buffer            
;    );
;------------------------------------------------------------------------------
global IoWriteFifo8
IoWriteFifo8:
    xchg    rcx, rdx
    xchg    rsi, r8             ; rsi: buffer address; r8: save rsi

    ; Check if we need to unroll String I/O
    call    SevNoRepIo
    test    eax, eax
    jnz     @IoWriteFifo8_NoRep

    cld
    rep     outsb
    jmp     @IoWriteFifo8_Done

@IoWriteFifo8_NoRep:
    jrcxz   @IoWriteFifo8_Done

@IoWriteFifo8_Loop:
    mov     al, byte [rsi]
    out     dx, al
    inc     rsi
    loop    @IoWriteFifo8_Loop

@IoWriteFifo8_Done:
    mov     rsi, r8             ; restore rsi
    ret

;------------------------------------------------------------------------------
;  void
;  __cdecl
;  IoWriteFifo16 (
;     UINTN                  Port,              
;     UINTN                  Size,              
;     void                   *Buffer            
;    );
;------------------------------------------------------------------------------
global IoWriteFifo16
IoWriteFifo16:
    xchg    rcx, rdx
    xchg    rsi, r8             ; rsi: buffer address; r8: save rsi

    ; Check if we need to unroll String I/O
    call    SevNoRepIo
    test    eax, eax
    jnz     @IoWriteFifo16_NoRep

    cld
    rep     outsw
    jmp     @IoWriteFifo16_Done

@IoWriteFifo16_NoRep:
    jrcxz   @IoWriteFifo16_Done

@IoWriteFifo16_Loop:
    mov     ax, word [rsi]
    out     dx, ax
    add     rsi, 2
    loop    @IoWriteFifo16_Loop

@IoWriteFifo16_Done:
    mov     rsi, r8             ; restore rsi
    ret

;------------------------------------------------------------------------------
;  void
;  __cdecl
;  IoWriteFifo32 (
;     UINTN                  Port,              
;     UINTN                  Size,              
;     void                   *Buffer            
;    );
;------------------------------------------------------------------------------
global IoWriteFifo32
IoWriteFifo32:
    xchg    rcx, rdx
    xchg    rsi, r8             ; rsi: buffer address; r8: save rsi

    ; Check if we need to unroll String I/O
    call    SevNoRepIo
    test    eax, eax
    jnz     @IoWriteFifo32_NoRep

    cld
    rep     outsd
    jmp     @IoWriteFifo32_Done

@IoWriteFifo32_NoRep:
    jrcxz   @IoWriteFifo32_Done

@IoWriteFifo32_Loop:
    mov     eax, dword [rsi]
    out     dx, eax
    add     rsi, 4
    loop    @IoWriteFifo32_Loop

@IoWriteFifo32_Done:
    mov     rsi, r8             ; restore rsi
    ret

