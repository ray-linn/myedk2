#line 1 "d:\\edk2\\edk2\\MdePkg\\Library\\BaseMemoryLibMmx\\X64\\CopyMem.nasm"
#line 1 "d:\\edk2\\edk2\\Build\\Mde\\RELEASE_VS2019\\X64\\MdePkg\\Library\\BaseMemoryLibMmx\\BaseMemoryLibMmx\\DEBUG\\AutoGen.h"















#line 1 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"




















#line 1 "d:\\edk2\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"




















  #pragma pack()
#line 23 "d:\\edk2\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"













#line 37 "d:\\edk2\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"


























#line 64 "d:\\edk2\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"











  #pragma warning ( disable : 4214 )




  #pragma warning ( disable : 4100 )





  #pragma warning ( disable : 4057 )




  #pragma warning ( disable : 4127 )




  #pragma warning ( disable : 4505 )




  #pragma warning ( disable : 4206 )

  









    #pragma warning ( disable : 4701 )





    #pragma warning ( disable : 4703 )

  #line 122 "d:\\edk2\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"

#line 124 "d:\\edk2\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"









typedef unsigned __int64 UINT64;



typedef __int64 INT64;



typedef unsigned __int32 UINT32;



typedef __int32 INT32;



typedef unsigned short UINT16;




typedef unsigned short CHAR16;



typedef short INT16;




typedef unsigned char BOOLEAN;



typedef unsigned char UINT8;



typedef char CHAR8;



typedef signed char INT8;















































#line 224 "d:\\edk2\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"





typedef UINT64 UINTN;




typedef INT64 INTN;












































































#line 312 "d:\\edk2\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"







#line 320 "d:\\edk2\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"















#line 336 "d:\\edk2\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"

#line 338 "d:\\edk2\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"
#line 22 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"





  #pragma warning ( disable : 4200 )
#line 29 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"













#line 43 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"






#line 50 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"






  













#line 71 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"

  





  #line 79 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"
#line 80 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"







  






#line 95 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"






  






#line 109 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"
#line 110 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"






  









  





  #line 133 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"
#line 134 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"








  









  





  #line 159 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"
#line 160 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"






  





#line 173 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"





  #line 179 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"
#line 180 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"

























#line 206 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"









#line 216 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"





typedef struct {
  UINT32    Data1;
  UINT16    Data2;
  UINT16    Data3;
  UINT8     Data4[8];
} GUID;




typedef struct {
  UINT8    Addr[4];
} IPv4_ADDRESS;




typedef struct {
  UINT8    Addr[16];
} IPv6_ADDRESS;




typedef UINT64 PHYSICAL_ADDRESS;




typedef struct _LIST_ENTRY LIST_ENTRY;




struct _LIST_ENTRY {
  LIST_ENTRY    *ForwardLink;
  LIST_ENTRY    *BackLink;
};


































































































































































































































































































































































#line 614 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"











#line 626 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"












































#line 671 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"




typedef CHAR8 *VA_LIST;






























































#line 739 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"




typedef UINTN *BASE_LIST;











































#line 788 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"



#line 792 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"















#line 808 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"






static_assert (sizeof (BOOLEAN) == 1, "sizeof (BOOLEAN) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (INT8)    == 1, "sizeof (INT8) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (UINT8)   == 1, "sizeof (UINT8) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (INT16)   == 2, "sizeof (INT16) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (UINT16)  == 2, "sizeof (UINT16) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (INT32)   == 4, "sizeof (INT32) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (UINT32)  == 4, "sizeof (UINT32) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (INT64)   == 8, "sizeof (INT64) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (UINT64)  == 8, "sizeof (UINT64) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (CHAR8)   == 1, "sizeof (CHAR8) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (CHAR16)  == 2, "sizeof (CHAR16) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (L'A')    == 2, "sizeof (L'A') does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (L"A")    == 4, "sizeof (L\"A\") does not meet UEFI Specification Data Type requirements");








typedef enum {
  __VerifyUint8EnumValue = 0xff
} __VERIFY_UINT8_ENUM_SIZE;

typedef enum {
  __VerifyUint16EnumValue = 0xffff
} __VERIFY_UINT16_ENUM_SIZE;

typedef enum {
  __VerifyUint32EnumValue = 0xffffffff
} __VERIFY_UINT32_ENUM_SIZE;

static_assert (sizeof (__VERIFY_UINT8_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (__VERIFY_UINT16_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (__VERIFY_UINT32_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
















































































































typedef UINTN RETURN_STATUS;










































































































































































































































































































void *
_ReturnAddress (
  void
  );

  #pragma intrinsic(_ReturnAddress)







































#line 1307 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"














#line 1322 "d:\\edk2\\edk2\\MdePkg\\Include\\Base.h"
#line 17 "d:\\edk2\\edk2\\Build\\Mde\\RELEASE_VS2019\\X64\\MdePkg\\Library\\BaseMemoryLibMmx\\BaseMemoryLibMmx\\DEBUG\\AutoGen.h"

extern GUID  gEfiCallerIdGuid;
extern GUID  gEdkiiDscPlatformGuid;
extern CHAR8 *gEfiCallerBaseName;



extern UINT64 _gPcd_SkuId_Array[];






#line 32 "d:\\edk2\\edk2\\Build\\Mde\\RELEASE_VS2019\\X64\\MdePkg\\Library\\BaseMemoryLibMmx\\BaseMemoryLibMmx\\DEBUG\\AutoGen.h"
#line 1 "d:\\edk2\\edk2\\MdePkg\\Library\\BaseMemoryLibMmx\\X64\\CopyMem.nasm"
;------------------------------------------------------------------------------
;
; Copyright (c) 2006, Intel Corporation. All rights reserved.<BR>
; SPDX-License-Identifier: BSD-2-Clause-Patent
;
; Module Name:
;
;   CopyMem.nasm
;
; Abstract:
;
;   CopyMem function
;
; Notes:
;
;------------------------------------------------------------------------------

    DEFAULT REL
    SECTION .text

;------------------------------------------------------------------------------
; void *
; __cdecl
; InternalMemCopyMem (
;        void                      *DestinationBuffer,
;         const void                *SourceBuffer,
;         UINTN                     Length
;   );
;------------------------------------------------------------------------------
global InternalMemCopyMem
InternalMemCopyMem:
    push    rsi
    push    rdi
    mov     rsi, rdx                    ; rsi <- Source
    mov     rdi, rcx                    ; rdi <- Destination
    lea     r9, [rsi + r8 - 1]          ; r9 <- End of Source
    cmp     rsi, rdi
    mov     rax, rdi                    ; rax <- Destination as return value
    jae     .0
    cmp     r9, rdi
    jae     @CopyBackward               ; Copy backward if overlapped
.0:
    mov     rcx, r8
    and     r8, 7
    shr     rcx, 3                      ; rcx <- # of Qwords to copy
    jz      @CopyBytes
    DB      0x49, 0xf, 0x7e, 0xc2         ; movd r10, mm0 (Save mm0 in r10)
.1:
    DB      0xf, 0x6f, 0x6               ; movd mm0, [rsi]
    DB      0xf, 0xe7, 0x7              ; movntq [rdi], mm0
    add     rsi, 8
    add     rdi, 8
    loop    .1
    mfence
    DB      0x49, 0xf, 0x6e, 0xc2         ; movd mm0, r10 (Restore mm0)
    jmp     @CopyBytes
@CopyBackward:
    mov     rsi, r9                     ; rsi <- End of Source
    lea     rdi, [rdi + r8 - 1]         ; rdi <- End of Destination
    std                                 ; set direction flag
@CopyBytes:
    mov     rcx, r8
    rep     movsb                       ; Copy bytes backward
    cld
    pop     rdi
    pop     rsi
    ret

