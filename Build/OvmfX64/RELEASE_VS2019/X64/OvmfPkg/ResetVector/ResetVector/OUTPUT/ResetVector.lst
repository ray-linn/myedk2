     1                                  ;------------------------------------------------------------------------------
     2                                  ; @file
     3                                  ; This file includes all other code files to assemble the reset vector code
     4                                  ;
     5                                  ; Copyright (c) 2008 - 2013, Intel Corporation. All rights reserved.<BR>
     6                                  ; Copyright (c) 2020, Advanced Micro Devices, Inc. All rights reserved.<BR>
     7                                  ; SPDX-License-Identifier: BSD-2-Clause-Patent
     8                                  ;
     9                                  ;------------------------------------------------------------------------------
    10                                  
    11                                  ;
    12                                  ; If neither ARCH_IA32 nor ARCH_X64 are defined, then try to include
    13                                  ; Base.h to use the C pre-processor to determine the architecture.
    14                                  ;
    15                                  %ifndef ARCH_IA32
    16                                    %ifndef ARCH_X64
    17                                      
    18                                      
    19                                  
    20                                  
    21                                        %define ARCH_X64
    22                                  
    23                                    %endif
    24                                  %endif
    25                                  
    26                                  %ifdef ARCH_IA32
    27                                    %ifdef ARCH_X64
    28                                      %error "Only one of ARCH_IA32 or ARCH_X64 can be defined."
    29                                    %endif
    30                                  %elifdef ARCH_X64
    31                                  %else
    32                                    %error "Either ARCH_IA32 or ARCH_X64 must be defined."
    33                                  %endif
    34                                  
    35                                  %include "CommonMacros.inc"
    36                              <1> ;------------------------------------------------------------------------------
    37                              <1> ; @file
    38                              <1> ; Common macros used in the ResetVector VTF module.
    39                              <1> ;
    40                              <1> ; Copyright (c) 2008, Intel Corporation. All rights reserved.<BR>
    41                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
    42                              <1> ;
    43                              <1> ;------------------------------------------------------------------------------
    44                              <1> 
    45                              <1> %define ADDR16_OF(x) (0x10000 - fourGigabytes + x)
    46                              <1> %define ADDR_OF(x) (0x100000000 - fourGigabytes + x)
    47                              <1> 
    48                              <1> %macro  OneTimeCall 1
    49                              <1>     jmp     %1
    50                              <1> %1 %+ OneTimerCallReturn:
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro  OneTimeCallRet 1
    54                              <1>     jmp     %1 %+ OneTimerCallReturn
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> StartOfResetVectorCode:
    58                              <1> 
    59                              <1> %define ADDR_OF_START_OF_RESET_CODE ADDR_OF(StartOfResetVectorCode)
    60                              <1> 
    36                                  
    37                                  %include "PostCodes.inc"
    38                              <1> ;------------------------------------------------------------------------------
    39                              <1> ; @file
    40                              <1> ; Definitions of POST CODES for the reset vector module
    41                              <1> ;
    42                              <1> ; Copyright (c) 2009, Intel Corporation. All rights reserved.<BR>
    43                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
    44                              <1> ;
    45                              <1> ;------------------------------------------------------------------------------
    46                              <1> 
    47                              <1> %define POSTCODE_16BIT_MODE     0x16
    48                              <1> %define POSTCODE_32BIT_MODE     0x32
    49                              <1> %define POSTCODE_64BIT_MODE     0x64
    50                              <1> 
    51                              <1> %define POSTCODE_BFV_NOT_FOUND  0xb0
    52                              <1> %define POSTCODE_BFV_FOUND      0xb1
    53                              <1> 
    54                              <1> %define POSTCODE_SEC_NOT_FOUND  0xf0
    55                              <1> %define POSTCODE_SEC_FOUND      0xf1
    56                              <1> 
    38                                  
    39                                  %ifdef DEBUG_PORT80
    40                                    %include "Port80Debug.asm"
    41                                  %elifdef DEBUG_SERIAL
    42                                    %include "SerialDebug.asm"
    43                                  %else
    44                                    %include "DebugDisabled.asm"
    45                              <1> ;------------------------------------------------------------------------------
    46                              <1> ; @file
    47                              <1> ; Debug disabled
    48                              <1> ;
    49                              <1> ; Copyright (c) 2009, Intel Corporation. All rights reserved.<BR>
    50                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
    51                              <1> ;
    52                              <1> ;------------------------------------------------------------------------------
    53                              <1> 
    54                              <1> BITS    16
    55                              <1> 
    56                              <1> %macro  debugInitialize 0
    57                              <1>     ;
    58                              <1>     ; No initialization is required
    59                              <1>     ;
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> %macro  debugShowPostCode 1
    63                              <1> %endmacro
    64                              <1> 
    45                                  %endif
    46                                  
    47                                  %include "Ia32/SearchForBfvBase.asm"
    48                              <1> ;------------------------------------------------------------------------------
    49                              <1> ; @file
    50                              <1> ; Search for the Boot Firmware Volume (BFV) base address
    51                              <1> ;
    52                              <1> ; Copyright (c) 2008 - 2009, Intel Corporation. All rights reserved.<BR>
    53                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
    54                              <1> ;
    55                              <1> ;------------------------------------------------------------------------------
    56                              <1> 
    57                              <1> ;#define EFI_FIRMWARE_FILE_SYSTEM2_GUID ;  { 0x8c8ce578, 0x8a3d, 0x4f1c, { 0x99, 0x35, 0x89, 0x61, 0x85, 0xc3, 0x2d, 0xd3 } }
    59                              <1> %define FFS_GUID_DWORD0 0x8c8ce578
    60                              <1> %define FFS_GUID_DWORD1 0x4f1c8a3d
    61                              <1> %define FFS_GUID_DWORD2 0x61893599
    62                              <1> %define FFS_GUID_DWORD3 0xd32dc385
    63                              <1> 
    64                              <1> BITS    32
    65                              <1> 
    66                              <1> ;
    67                              <1> ; Modified:  EAX, EBX
    68                              <1> ; Preserved: EDI, ESP
    69                              <1> ;
    70                              <1> ; @param[out]  EBP  Address of Boot Firmware Volume (BFV)
    71                              <1> ;
    72                              <1> Flat32SearchForBfvBase:
    73                              <1> 
    74 00000000 31C0                <1>     xor     eax, eax
    75                              <1> searchingForBfvHeaderLoop:
    76                              <1>     ;
    77                              <1>     ; We check for a firmware volume at every 4KB address in the top 16MB
    78                              <1>     ; just below 4GB.  (Addresses at 0xffHHH000 where H is any hex digit.)
    79                              <1>     ;
    80 00000002 2D00100000          <1>     sub     eax, 0x1000
    81 00000007 3D000000FF          <1>     cmp     eax, 0xff000000
    82 0000000C 7233                <1>     jb      searchedForBfvHeaderButNotFound
    83                              <1> 
    84                              <1>     ;
    85                              <1>     ; Check FFS GUID
    86                              <1>     ;
    87 0000000E 81781078E58C8C      <1>     cmp     dword [eax + 0x10], FFS_GUID_DWORD0
    88 00000015 75EB                <1>     jne     searchingForBfvHeaderLoop
    89 00000017 8178143D8A1C4F      <1>     cmp     dword [eax + 0x14], FFS_GUID_DWORD1
    90 0000001E 75E2                <1>     jne     searchingForBfvHeaderLoop
    91 00000020 81781899358961      <1>     cmp     dword [eax + 0x18], FFS_GUID_DWORD2
    92 00000027 75D9                <1>     jne     searchingForBfvHeaderLoop
    93 00000029 81781C85C32DD3      <1>     cmp     dword [eax + 0x1c], FFS_GUID_DWORD3
    94 00000030 75D0                <1>     jne     searchingForBfvHeaderLoop
    95                              <1> 
    96                              <1>     ;
    97                              <1>     ; Check FV Length
    98                              <1>     ;
    99 00000032 83782400            <1>     cmp     dword [eax + 0x24], 0
   100 00000036 75CA                <1>     jne     searchingForBfvHeaderLoop
   101 00000038 89C3                <1>     mov     ebx, eax
   102 0000003A 035820              <1>     add     ebx, dword [eax + 0x20]
   103 0000003D 75C3                <1>     jnz     searchingForBfvHeaderLoop
   104                              <1> 
   105 0000003F EB09                <1>     jmp     searchedForBfvHeaderAndItWasFound
   106                              <1> 
   107                              <1> searchedForBfvHeaderButNotFound:
   108                              <1>     ;
   109                              <1>     ; Hang if the SEC entry point was not found
   110                              <1>     ;
   111                              <1>     debugShowPostCode POSTCODE_BFV_NOT_FOUND
   112                              <1> 
   113                              <1>     ;
   114                              <1>     ; 0xbfbfbfbf in the EAX & EBP registers helps signal what failed
   115                              <1>     ; for debugging purposes.
   116                              <1>     ;
   117 00000041 B8BFBFBFBF          <1>     mov     eax, 0xBFBFBFBF
   118 00000046 89C5                <1>     mov     ebp, eax
   119 00000048 EBFE                <1>     jmp     $
   120                              <1> 
   121                              <1> searchedForBfvHeaderAndItWasFound:
   122 0000004A 89C5                <1>     mov     ebp, eax
   123                              <1> 
   124                              <1>     debugShowPostCode POSTCODE_BFV_FOUND
   125                              <1> 
   126                              <1>     OneTimeCallRet Flat32SearchForBfvBase
    54 0000004C E93D080000          <2>  jmp %1 %+ OneTimerCallReturn
   127                              <1> 
    48                                  %include "Ia32/SearchForSecEntry.asm"
    49                              <1> ;------------------------------------------------------------------------------
    50                              <1> ; @file
    51                              <1> ; Search for the SEC Core entry point
    52                              <1> ;
    53                              <1> ; Copyright (c) 2008 - 2011, Intel Corporation. All rights reserved.<BR>
    54                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
    55                              <1> ;
    56                              <1> ;------------------------------------------------------------------------------
    57                              <1> 
    58                              <1> BITS    32
    59                              <1> 
    60                              <1> %define EFI_FV_FILETYPE_SECURITY_CORE         0x03
    61                              <1> 
    62                              <1> ;
    63                              <1> ; Modified:  EAX, EBX, ECX, EDX
    64                              <1> ; Preserved: EDI, EBP, ESP
    65                              <1> ;
    66                              <1> ; @param[in]   EBP  Address of Boot Firmware Volume (BFV)
    67                              <1> ; @param[out]  ESI  SEC Core Entry Point Address
    68                              <1> ;
    69                              <1> Flat32SearchForSecEntryPoint:
    70                              <1> 
    71                              <1>     ;
    72                              <1>     ; Initialize EBP and ESI to 0
    73                              <1>     ;
    74 00000051 31DB                <1>     xor     ebx, ebx
    75 00000053 89DE                <1>     mov     esi, ebx
    76                              <1> 
    77                              <1>     ;
    78                              <1>     ; Pass over the BFV header
    79                              <1>     ;
    80 00000055 89E8                <1>     mov     eax, ebp
    81 00000057 668B5D30            <1>     mov     bx, [ebp + 0x30]
    82 0000005B 01D8                <1>     add     eax, ebx
    83 0000005D 723B                <1>     jc      secEntryPointWasNotFound
    84                              <1> 
    85 0000005F EB03                <1>     jmp     searchingForFfsFileHeaderLoop
    86                              <1> 
    87                              <1> moveForwardWhileSearchingForFfsFileHeaderLoop:
    88                              <1>     ;
    89                              <1>     ; Make forward progress in the search
    90                              <1>     ;
    91 00000061 40                  <1>     inc     eax
    92 00000062 7236                <1>     jc      secEntryPointWasNotFound
    93                              <1> 
    94                              <1> searchingForFfsFileHeaderLoop:
    95 00000064 85C0                <1>     test    eax, eax
    96 00000066 7432                <1>     jz      secEntryPointWasNotFound
    97                              <1> 
    98                              <1>     ;
    99                              <1>     ; Ensure 8 byte alignment
   100                              <1>     ;
   101 00000068 83C007              <1>     add     eax, 7
   102 0000006B 722D                <1>     jc      secEntryPointWasNotFound
   103 0000006D 24F8                <1>     and     al, 0xf8
   104                              <1> 
   105                              <1>     ;
   106                              <1>     ; Look to see if there is an FFS file at eax
   107                              <1>     ;
   108 0000006F 8A5817              <1>     mov     bl, [eax + 0x17]
   109 00000072 F6C320              <1>     test    bl, 0x20
   110 00000075 74EA                <1>     jz      moveForwardWhileSearchingForFfsFileHeaderLoop
   111 00000077 8B4814              <1>     mov     ecx, [eax + 0x14]
   112 0000007A 81E1FFFFFF00        <1>     and     ecx, 0x00ffffff
   113 00000080 09C9                <1>     or      ecx, ecx
   114 00000082 74DD                <1>     jz      moveForwardWhileSearchingForFfsFileHeaderLoop
   115 00000084 01C1                <1>     add     ecx, eax
   116 00000086 7402                <1>     jz      jumpSinceWeFoundTheLastFfsFile
   117 00000088 72D7                <1>     jc      moveForwardWhileSearchingForFfsFileHeaderLoop
   118                              <1> jumpSinceWeFoundTheLastFfsFile:
   119                              <1> 
   120                              <1>     ;
   121                              <1>     ; There seems to be a valid file at eax
   122                              <1>     ;
   123 0000008A 80781203            <1>     cmp     byte [eax + 0x12], EFI_FV_FILETYPE_SECURITY_CORE ; Check File Type
   124 0000008E 7506                <1>     jne     readyToTryFfsFileAtEcx
   125                              <1> 
   126                              <1> fileTypeIsSecCore:
   127                              <1>     OneTimeCall GetEntryPointOfFfsFile
    49 00000090 EB17                <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   128 00000092 85C0                <1>     test    eax, eax
   129 00000094 7506                <1>     jnz     doneSeachingForSecEntryPoint
   130                              <1> 
   131                              <1> readyToTryFfsFileAtEcx:
   132                              <1>     ;
   133                              <1>     ; Try the next FFS file at ECX
   134                              <1>     ;
   135 00000096 89C8                <1>     mov     eax, ecx
   136 00000098 EBCA                <1>     jmp     searchingForFfsFileHeaderLoop
   137                              <1> 
   138                              <1> secEntryPointWasNotFound:
   139 0000009A 31C0                <1>     xor     eax, eax
   140                              <1> 
   141                              <1> doneSeachingForSecEntryPoint:
   142 0000009C 89C6                <1>     mov     esi, eax
   143                              <1> 
   144 0000009E 85F6                <1>     test    esi, esi
   145 000000A0 7502                <1>     jnz     secCoreEntryPointWasFound
   146                              <1> 
   147                              <1> secCoreEntryPointWasNotFound:
   148                              <1>     ;
   149                              <1>     ; Hang if the SEC entry point was not found
   150                              <1>     ;
   151                              <1>     debugShowPostCode POSTCODE_SEC_NOT_FOUND
   152 000000A2 74FE                <1>     jz      $
   153                              <1> 
   154                              <1> secCoreEntryPointWasFound:
   155                              <1>     debugShowPostCode POSTCODE_SEC_FOUND
   156                              <1> 
   157                              <1>     OneTimeCallRet Flat32SearchForSecEntryPoint
    54 000000A4 E9EA070000          <2>  jmp %1 %+ OneTimerCallReturn
   158                              <1> 
   159                              <1> %define EFI_SECTION_PE32                  0x10
   160                              <1> %define EFI_SECTION_TE                    0x12
   161                              <1> 
   162                              <1> ;
   163                              <1> ; Input:
   164                              <1> ;   EAX - Start of FFS file
   165                              <1> ;   ECX - End of FFS file
   166                              <1> ;
   167                              <1> ; Output:
   168                              <1> ;   EAX - Entry point of PE32 (or 0 if not found)
   169                              <1> ;
   170                              <1> ; Modified:
   171                              <1> ;   EBX
   172                              <1> ;
   173                              <1> GetEntryPointOfFfsFile:
   174 000000A9 85C0                <1>     test    eax, eax
   175 000000AB 745F                <1>     jz      getEntryPointOfFfsFileErrorReturn
   176 000000AD 83C018              <1>     add     eax, 0x18       ; EAX = Start of section
   177                              <1> 
   178                              <1> getEntryPointOfFfsFileLoopForSections:
   179 000000B0 39C8                <1>     cmp     eax, ecx
   180 000000B2 7358                <1>     jae     getEntryPointOfFfsFileErrorReturn
   181                              <1> 
   182 000000B4 80780310            <1>     cmp     byte [eax + 3], EFI_SECTION_PE32
   183 000000B8 741B                <1>     je      getEntryPointOfFfsFileFoundPe32Section
   184                              <1> 
   185 000000BA 80780312            <1>     cmp     byte [eax + 3], EFI_SECTION_TE
   186 000000BE 7432                <1>     je      getEntryPointOfFfsFileFoundTeSection
   187                              <1> 
   188                              <1>     ;
   189                              <1>     ; The section type was not PE32 or TE, so move to next section
   190                              <1>     ;
   191 000000C0 8B18                <1>     mov     ebx, dword [eax]
   192 000000C2 81E3FFFFFF00        <1>     and     ebx, 0x00ffffff
   193 000000C8 01D8                <1>     add     eax, ebx
   194 000000CA 7240                <1>     jc      getEntryPointOfFfsFileErrorReturn
   195                              <1> 
   196                              <1>     ;
   197                              <1>     ; Ensure that FFS section is 32-bit aligned
   198                              <1>     ;
   199 000000CC 83C003              <1>     add     eax, 3
   200 000000CF 723B                <1>     jc      getEntryPointOfFfsFileErrorReturn
   201 000000D1 24FC                <1>     and     al, 0xfc
   202 000000D3 EBDB                <1>     jmp     getEntryPointOfFfsFileLoopForSections
   203                              <1> 
   204                              <1> getEntryPointOfFfsFileFoundPe32Section:
   205 000000D5 83C004              <1>     add     eax, 4       ; EAX = Start of PE32 image
   206                              <1> 
   207 000000D8 6681384D5A          <1>     cmp     word [eax], 'MZ'
   208 000000DD 752D                <1>     jne     getEntryPointOfFfsFileErrorReturn
   209 000000DF 0FB7583C            <1>     movzx   ebx, word [eax + 0x3c]
   210 000000E3 01C3                <1>     add     ebx, eax
   211                              <1> 
   212                              <1>     ; if (Hdr.Pe32->Signature == EFI_IMAGE_NT_SIGNATURE)
   213 000000E5 813B50450000        <1>     cmp     dword [ebx], `PE\x00\x00`
   214 000000EB 751F                <1>     jne     getEntryPointOfFfsFileErrorReturn
   215                              <1> 
   216                              <1>     ; *EntryPoint = (VOID *)((UINTN)Pe32Data +
   217                              <1>     ;   (UINTN)(Hdr.Pe32->OptionalHeader.AddressOfEntryPoint & 0x0ffffffff));
   218 000000ED 034328              <1>     add     eax, [ebx + 0x4 + 0x14 + 0x10]
   219 000000F0 EB1F                <1>     jmp     getEntryPointOfFfsFileReturn
   220                              <1> 
   221                              <1> getEntryPointOfFfsFileFoundTeSection:
   222 000000F2 83C004              <1>     add     eax, 4       ; EAX = Start of TE image
   223 000000F5 89C3                <1>     mov     ebx, eax
   224                              <1> 
   225                              <1>     ; if (Hdr.Te->Signature == EFI_TE_IMAGE_HEADER_SIGNATURE)
   226 000000F7 66813B565A          <1>     cmp     word [ebx], 'VZ'
   227 000000FC 750E                <1>     jne     getEntryPointOfFfsFileErrorReturn
   228                              <1>     ; *EntryPoint = (VOID *)((UINTN)Pe32Data +
   229                              <1>     ;   (UINTN)(Hdr.Te->AddressOfEntryPoint & 0x0ffffffff) +
   230                              <1>     ;   sizeof(EFI_TE_IMAGE_HEADER) - Hdr.Te->StrippedSize);
   231 000000FE 034308              <1>     add     eax, [ebx + 0x8]
   232 00000101 83C028              <1>     add     eax, 0x28
   233 00000104 0FB75B06            <1>     movzx   ebx, word [ebx + 0x6]
   234 00000108 29D8                <1>     sub     eax, ebx
   235 0000010A EB05                <1>     jmp     getEntryPointOfFfsFileReturn
   236                              <1> 
   237                              <1> getEntryPointOfFfsFileErrorReturn:
   238 0000010C B800000000          <1>     mov     eax, 0
   239                              <1> 
   240                              <1> getEntryPointOfFfsFileReturn:
   241                              <1>     OneTimeCallRet GetEntryPointOfFfsFile
    54 00000111 E97CFFFFFF          <2>  jmp %1 %+ OneTimerCallReturn
   242                              <1> 
    49                                  
    50                                  %define WORK_AREA_GUEST_TYPE (00080B000h)
    51                                  
    52                                  %ifdef ARCH_X64
    53                                    
    54                                  
    55                                    %if (000006000h != 06000h)
    56                                      %error "This implementation inherently depends on PcdOvmfSecPageTablesSize"
    57                                    %endif
    58                                  
    59                                    %if (000001000h != 01000h)
    60                                      %error "This implementation inherently depends on PcdOvmfSecGhcbPageTableSize"
    61                                    %endif
    62                                  
    63                                    %if (000002000h != 02000h)
    64                                      %error "This implementation inherently depends on PcdOvmfSecGhcbSize"
    65                                    %endif
    66                                  
    67                                    %if ((000809000h >> 21) !=        ((000809000h + 000002000h - 1) >> 21))
    69                                      %error "This implementation inherently depends on PcdOvmfSecGhcbBase not straddling a 2MB boundary"
    70                                    %endif
    71                                  
    72                                    %define TDX_BFV_RAW_DATA_OFFSET   084000h
    73                                    %define TDX_BFV_RAW_DATA_SIZE     00037C000h
    74                                    %define TDX_BFV_MEMORY_BASE       0FFC84000h
    75                                    %define TDX_BFV_MEMORY_SIZE       00037C000h
    76                                  
    77                                    %define TDX_CFV_RAW_DATA_OFFSET   0
    78                                    %define TDX_CFV_RAW_DATA_SIZE     084000h
    79                                    %define TDX_CFV_MEMORY_BASE       0FFC00000h,
    80                                    %define TDX_CFV_MEMORY_SIZE       084000h,
    81                                  
    82                                    %define TDX_HEAP_STACK_BASE       000810000h
    83                                    %define TDX_HEAP_STACK_SIZE       000010000h
    84                                  
    85                                    %define TDX_HOB_MEMORY_BASE       000809000h
    86                                    %define TDX_HOB_MEMORY_SIZE       000002000h
    87                                  
    88                                    %define TDX_INIT_MEMORY_BASE      00080B000h
    89                                    %define TDX_INIT_MEMORY_SIZE      (000001000h + 000001000h)
    90                                  
    91                                    %define OVMF_PAGE_TABLE_BASE      000800000h
    92                                    %define OVMF_PAGE_TABLE_SIZE      000006000h
    93                                  
    94                                    %define TDX_WORK_AREA_PGTBL_READY (00080B000h + 4)
    95                                    %define TDX_WORK_AREA_GPAW        (00080B000h + 8)
    96                                  
    97                                    %define PT_ADDR(Offset) (000800000h + (Offset))
    98                                  
    99                                    %define GHCB_PT_ADDR (000808000h)
   100                                    %define GHCB_BASE (000809000h)
   101                                    %define GHCB_SIZE (000002000h)
   102                                    %define SEV_ES_WORK_AREA (8433668)
   103                                    %define SEV_ES_WORK_AREA_RDRAND (8433668 + 8)
   104                                    %define SEV_ES_WORK_AREA_ENC_MASK (8433668 + 16)
   105                                    %define SEV_ES_VC_TOP_OF_STACK (000810000h + 000010000h)
   106                                    %define SEV_SNP_SECRETS_BASE  (00080D000h)
   107                                    %define SEV_SNP_SECRETS_SIZE  (000001000h)
   108                                    %define CPUID_BASE  (00080E000h)
   109                                    %define CPUID_SIZE  (000001000h)
   110                                    %define SNP_SEC_MEM_BASE_DESC_1 (000800000h)
   111                                    %define SNP_SEC_MEM_SIZE_DESC_1 (000809000h - SNP_SEC_MEM_BASE_DESC_1)
   112                                    ;
   113                                    ; The PcdOvmfSecGhcbBase reserves two GHCB pages. The first page is used
   114                                    ; as GHCB shared page and second is used for bookkeeping to support the
   115                                    ; nested GHCB in SEC phase. The bookkeeping page is mapped private. The VMM
   116                                    ; does not need to validate the shared page but it need to validate the
   117                                    ; bookkeeping page.
   118                                    ;
   119                                    %define SNP_SEC_MEM_BASE_DESC_2 (GHCB_BASE + 01000h)
   120                                    %define SNP_SEC_MEM_SIZE_DESC_2 (SEV_SNP_SECRETS_BASE - SNP_SEC_MEM_BASE_DESC_2)
   121                                    %define SNP_SEC_MEM_BASE_DESC_3 (CPUID_BASE + CPUID_SIZE)
   122                                    %define SNP_SEC_MEM_SIZE_DESC_3 (000820000h - SNP_SEC_MEM_BASE_DESC_3)
   123                                  
   124                                  %include "X64/IntelTdxMetadata.asm"
   125                              <1> ;------------------------------------------------------------------------------
   126                              <1> ; @file
   127                              <1> ; Tdx Virtual Firmware metadata
   128                              <1> ;
   129                              <1> ; When host VMM creates a new guest TD, some initial set of TD-private pages
   130                              <1> ; are added using the TDH.MEM.PAGE.ADD function. These pages typically contain
   131                              <1> ; Virtual BIOS code and data along with some clear pages for stacks and heap.
   132                              <1> ; In the meanwhile, some configuration data need be measured by host VMM.
   133                              <1> ; Tdx Metadata is designed for this purpose to indicate host VMM how to do the
   134                              <1> ; above tasks.
   135                              <1> ;
   136                              <1> ; Tdx Metadata consists of a DESCRIPTOR as the header followed by several
   137                              <1> ; SECTIONs. Host VMM sets up the memory for TDVF according to these sections.
   138                              <1> ;
   139                              <1> ; _Bfv is the example (Bfv refers to the Virtual BIOS code).
   140                              <1> ; - By DataOffset/RawDataSize host VMM knows about the position of the code
   141                              <1> ;   in the binary image.
   142                              <1> ; - MemoryAddress/MemoryDataSize indicates the guest physical address/size of
   143                              <1> ;   the Bfv to be loaded.
   144                              <1> ; - Type field means this section is of BFV. This field is designed for the
   145                              <1> ;   purpose that in some case host VMM may do some additional processing based
   146                              <1> ;   upon the section type. TdHob section is an example. Host VMM pass the
   147                              <1> ;   physical memory information to the guest firmware by writing the data in
   148                              <1> ;   the memory region designated by TdHob section.
   149                              <1> ; - By design code part of the binary image (Bfv) should be measured by host
   150                              <1> ;   VMM. This is indicated by the Attributes field.
   151                              <1> ;
   152                              <1> ; So put all these information together, when a new guest is being created,
   153                              <1> ; the initial TD-private pages for BFV is added by TDH.MEM.PAGE.ADD function,
   154                              <1> ; and Bfv is loaded at the guest physical address indicated by MemoryAddress.
   155                              <1> ; Since the Attributes is TDX_METADATA_ATTRIBUTES_EXTENDMR, Bfv is measured by
   156                              <1> ; host VMM.
   157                              <1> ;
   158                              <1> ; Copyright (c) 2021, Intel Corporation. All rights reserved.<BR>
   159                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
   160                              <1> ;
   161                              <1> ;------------------------------------------------------------------------------
   162                              <1> 
   163                              <1> BITS    64
   164                              <1> 
   165                              <1> %define TDX_METADATA_SECTION_TYPE_BFV       0
   166                              <1> %define TDX_METADATA_SECTION_TYPE_CFV       1
   167                              <1> %define TDX_METADATA_SECTION_TYPE_TD_HOB    2
   168                              <1> %define TDX_METADATA_SECTION_TYPE_TEMP_MEM  3
   169                              <1> %define TDX_METADATA_VERSION                1
   170                              <1> %define TDX_METADATA_ATTRIBUTES_EXTENDMR    0x00000001
   171                              <1> 
   172 00000116 90<rep Ah>          <1> ALIGN   16
   173                              <1> TIMES (15 - ((TdxGuidedStructureEnd - TdxGuidedStructureStart + 15) % 16)) DB 0
   174                              <1> 
   175                              <1> TdxGuidedStructureStart:
   176                              <1> 
   177                              <1> ;
   178                              <1> ; TDVF meta data
   179                              <1> ;
   180                              <1> TdxMetadataGuid:
   181 00000120 F3F9EAE98E16D544    <1>   DB  0xf3, 0xf9, 0xea, 0xe9, 0x8e, 0x16, 0xd5, 0x44
   182 00000128 A8EB7F4D8738F6AE    <1>   DB  0xa8, 0xeb, 0x7f, 0x4d, 0x87, 0x38, 0xf6, 0xae
   183                              <1> 
   184                              <1> _Descriptor:
   185 00000130 54445646            <1>   DB 'T','D','V','F'                                  ; Signature
   186 00000134 D0000000            <1>   DD TdxGuidedStructureEnd - _Descriptor              ; Length
   187 00000138 01000000            <1>   DD TDX_METADATA_VERSION                             ; Version
   188 0000013C 06000000            <1>   DD (TdxGuidedStructureEnd - _Descriptor - 16)/32    ; Number of sections
   189                              <1> 
   190                              <1> _Bfv:
   191 00000140 00400800            <1>   DD TDX_BFV_RAW_DATA_OFFSET
   192 00000144 00C03700            <1>   DD TDX_BFV_RAW_DATA_SIZE
   193 00000148 0040C8FF00000000    <1>   DQ TDX_BFV_MEMORY_BASE
   194 00000150 00C0370000000000    <1>   DQ TDX_BFV_MEMORY_SIZE
   195 00000158 00000000            <1>   DD TDX_METADATA_SECTION_TYPE_BFV
   196 0000015C 01000000            <1>   DD TDX_METADATA_ATTRIBUTES_EXTENDMR
   197                              <1> 
   198                              <1> _Cfv:
   199 00000160 00000000            <1>   DD TDX_CFV_RAW_DATA_OFFSET
   200 00000164 00400800            <1>   DD TDX_CFV_RAW_DATA_SIZE
   201 00000168 0000C0FF00000000    <1>   DQ TDX_CFV_MEMORY_BASE
   202 00000170 0040080000000000    <1>   DQ TDX_CFV_MEMORY_SIZE
   203 00000178 01000000            <1>   DD TDX_METADATA_SECTION_TYPE_CFV
   204 0000017C 00000000            <1>   DD 0
   205                              <1> 
   206                              <1> _TdxHeapStack:
   207 00000180 00000000            <1>   DD 0
   208 00000184 00000000            <1>   DD 0
   209 00000188 0000810000000000    <1>   DQ TDX_HEAP_STACK_BASE
   210 00000190 0000010000000000    <1>   DQ TDX_HEAP_STACK_SIZE
   211 00000198 03000000            <1>   DD TDX_METADATA_SECTION_TYPE_TEMP_MEM
   212 0000019C 00000000            <1>   DD 0
   213                              <1> 
   214                              <1> _TdxInitMem:
   215 000001A0 00000000            <1>   DD 0
   216 000001A4 00000000            <1>   DD 0
   217 000001A8 00B0800000000000    <1>   DQ TDX_INIT_MEMORY_BASE
   218 000001B0 0020000000000000    <1>   DQ TDX_INIT_MEMORY_SIZE
   219 000001B8 03000000            <1>   DD TDX_METADATA_SECTION_TYPE_TEMP_MEM
   220 000001BC 00000000            <1>   DD 0
   221                              <1> 
   222                              <1> _TdHob:
   223 000001C0 00000000            <1>   DD 0
   224 000001C4 00000000            <1>   DD 0
   225 000001C8 0090800000000000    <1>   DQ TDX_HOB_MEMORY_BASE
   226 000001D0 0020000000000000    <1>   DQ TDX_HOB_MEMORY_SIZE
   227 000001D8 02000000            <1>   DD TDX_METADATA_SECTION_TYPE_TD_HOB
   228 000001DC 00000000            <1>   DD 0
   229                              <1> 
   230                              <1> _OvmfPageTable:
   231 000001E0 00000000            <1>   DD 0
   232 000001E4 00000000            <1>   DD 0
   233 000001E8 0000800000000000    <1>   DQ OVMF_PAGE_TABLE_BASE
   234 000001F0 0060000000000000    <1>   DQ OVMF_PAGE_TABLE_SIZE
   235 000001F8 03000000            <1>   DD TDX_METADATA_SECTION_TYPE_TEMP_MEM
   236 000001FC 00000000            <1>   DD 0
   237                              <1> 
   238                              <1> TdxGuidedStructureEnd:
   239                              <1> ALIGN   16
   125                                  %include "Ia32/Flat32ToFlat64.asm"
   126                              <1> ;------------------------------------------------------------------------------
   127                              <1> ; @file
   128                              <1> ; Transition from 32 bit flat protected mode into 64 bit flat protected mode
   129                              <1> ;
   130                              <1> ; Copyright (c) 2008 - 2018, Intel Corporation. All rights reserved.<BR>
   131                              <1> ; Copyright (c) 2020, Advanced Micro Devices, Inc. All rights reserved.<BR>
   132                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
   133                              <1> ;
   134                              <1> ;------------------------------------------------------------------------------
   135                              <1> 
   136                              <1> BITS    32
   137                              <1> 
   138                              <1> ;
   139                              <1> ; Modified:  EAX, ECX, EDX
   140                              <1> ;
   141                              <1> Transition32FlatTo64Flat:
   142                              <1> 
   143                              <1>     OneTimeCall SetCr3ForPageTables64
    49 00000200 E9FB030000          <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   144                              <1> 
   145 00000205 0F20E0              <1>     mov     eax, cr4
   146 00000208 0FBAE805            <1>     bts     eax, 5                      ; enable PAE
   147 0000020C 0F22E0              <1>     mov     cr4, eax
   148                              <1> 
   149                              <1>     ;
   150                              <1>     ; In TDX LME has already been set. So we're done and jump to enable
   151                              <1>     ; paging directly if Tdx is enabled.
   152                              <1>     ; EBX is cleared because in the later it will be used to check if
   153                              <1>     ; the second step of the SEV-ES mitigation is to be performed.
   154                              <1>     ;
   155 0000020F 31DB                <1>     xor     ebx, ebx
   156                              <1>     OneTimeCall IsTdxEnabled
    49 00000211 E985050000          <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   157 00000216 85C0                <1>     test    eax, eax
   158 00000218 7533                <1>     jnz     EnablePaging
   159                              <1> 
   160 0000021A B9800000C0          <1>     mov     ecx, 0xc0000080
   161 0000021F 0F32                <1>     rdmsr
   162 00000221 0FBAE808            <1>     bts     eax, 8                      ; set LME
   163 00000225 0F30                <1>     wrmsr
   164                              <1> 
   165                              <1>     ;
   166                              <1>     ; SEV-ES mitigation check support
   167                              <1>     ;
   168 00000227 31DB                <1>     xor     ebx, ebx
   169                              <1> 
   170 00000229 803D04B0800000      <1>     cmp     byte[SEV_ES_WORK_AREA], 0
   171 00000230 741B                <1>     jz      EnablePaging
   172                              <1> 
   173                              <1>     ;
   174                              <1>     ; SEV-ES is active, perform a quick sanity check against the reported
   175                              <1>     ; encryption bit position. This is to help mitigate against attacks where
   176                              <1>     ; the hypervisor reports an incorrect encryption bit position.
   177                              <1>     ;
   178                              <1>     ; This is the first step in a two step process. Before paging is enabled
   179                              <1>     ; writes to memory are encrypted. Using the RDRAND instruction (available
   180                              <1>     ; on all SEV capable processors), write 64-bits of random data to the
   181                              <1>     ; SEV_ES_WORK_AREA and maintain the random data in registers (register
   182                              <1>     ; state is protected under SEV-ES). This will be used in the second step.
   183                              <1>     ;
   184                              <1> RdRand1:
   185 00000232 0FC7F1              <1>     rdrand  ecx
   186 00000235 73FB                <1>     jnc     RdRand1
   187 00000237 890D0CB08000        <1>     mov     dword[SEV_ES_WORK_AREA_RDRAND], ecx
   188                              <1> RdRand2:
   189 0000023D 0FC7F2              <1>     rdrand  edx
   190 00000240 73FB                <1>     jnc     RdRand2
   191 00000242 891510B08000        <1>     mov     dword[SEV_ES_WORK_AREA_RDRAND + 4], edx
   192                              <1> 
   193                              <1>     ;
   194                              <1>     ; Use EBX instead of the SEV_ES_WORK_AREA memory to determine whether to
   195                              <1>     ; perform the second step.
   196                              <1>     ;
   197 00000248 BB01000000          <1>     mov     ebx, 1
   198                              <1> 
   199                              <1> EnablePaging:
   200 0000024D 0F20C0              <1>     mov     eax, cr0
   201 00000250 0FBAE81F            <1>     bts     eax, 31                     ; set PG
   202 00000254 0F22C0              <1>     mov     cr0, eax                    ; enable paging
   203                              <1> 
   204 00000257 EAFEF8FFFF1800      <1>     jmp     LINEAR_CODE64_SEL:ADDR_OF(jumpTo64BitAndLandHere)
   205                              <1> BITS    64
   206                              <1> jumpTo64BitAndLandHere:
   207                              <1> 
   208                              <1>     ;
   209                              <1>     ; Check if the second step of the SEV-ES mitigation is to be performed.
   210                              <1>     ;
   211 0000025E 85DB                <1>     test    ebx, ebx
   212 00000260 7412                <1>     jz      InsnCompare
   213                              <1> 
   214                              <1>     ;
   215                              <1>     ; SEV-ES is active, perform the second step of the encryption bit postion
   216                              <1>     ; mitigation check. The ECX and EDX register contain data from RDRAND that
   217                              <1>     ; was stored to memory in encrypted form. If the encryption bit position is
   218                              <1>     ; valid, the contents of ECX and EDX will match the memory location.
   219                              <1>     ;
   220 00000262 390C250CB08000      <1>     cmp     dword[SEV_ES_WORK_AREA_RDRAND], ecx
   221 00000269 7515                <1>     jne     SevEncBitHlt
   222 0000026B 39142510B08000      <1>     cmp     dword[SEV_ES_WORK_AREA_RDRAND + 4], edx
   223 00000272 750C                <1>     jne     SevEncBitHlt
   224                              <1> 
   225                              <1>     ;
   226                              <1>     ; If SEV or SEV-ES is active, perform a quick sanity check against
   227                              <1>     ; the reported encryption bit position. This is to help mitigate
   228                              <1>     ; against attacks where the hypervisor reports an incorrect encryption
   229                              <1>     ; bit position. If SEV is not active, this check will always succeed.
   230                              <1>     ;
   231                              <1>     ; The cmp instruction compares the first four bytes of the cmp instruction
   232                              <1>     ; itself (which will be read decrypted if SEV or SEV-ES is active and the
   233                              <1>     ; encryption bit position is valid) against the immediate within the
   234                              <1>     ; instruction (an instruction fetch is always decrypted correctly by
   235                              <1>     ; hardware) based on RIP relative addressing.
   236                              <1>     ;
   237                              <1> InsnCompare:
   238 00000274 813DF6FFFFFF813DF6- <1>     cmp     dword[rel InsnCompare], 0xFFF63D81
   238 0000027D FF                  <1>
   239 0000027E 7404                <1>     je      GoodCompare
   240                              <1> 
   241                              <1>     ;
   242                              <1>     ; The hypervisor provided an incorrect encryption bit position, do not
   243                              <1>     ; proceed.
   244                              <1>     ;
   245                              <1> SevEncBitHlt:
   246 00000280 FA                  <1>     cli
   247 00000281 F4                  <1>     hlt
   248 00000282 EBFC                <1>     jmp     SevEncBitHlt
   249                              <1> 
   250                              <1> GoodCompare:
   251                              <1>     debugShowPostCode POSTCODE_64BIT_MODE
   252                              <1> 
   253                              <1>     OneTimeCallRet Transition32FlatTo64Flat
    54 00000284 E90F060000          <2>  jmp %1 %+ OneTimerCallReturn
   254                              <1> 
   126                                  %include "Ia32/AmdSev.asm"
   127                              <1> ;------------------------------------------------------------------------------
   128                              <1> ; @file
   129                              <1> ; Provide the functions to check whether SEV and SEV-ES is enabled.
   130                              <1> ;
   131                              <1> ; Copyright (c) 2017 - 2021, Advanced Micro Devices, Inc. All rights reserved.<BR>
   132                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
   133                              <1> ;
   134                              <1> ;------------------------------------------------------------------------------
   135                              <1> 
   136                              <1> BITS    32
   137                              <1> 
   138                              <1> ;
   139                              <1> ; SEV-ES #VC exception handler support
   140                              <1> ;
   141                              <1> ; #VC handler local variable locations
   142                              <1> ;
   143                              <1> %define VC_CPUID_RESULT_EAX         0
   144                              <1> %define VC_CPUID_RESULT_EBX         4
   145                              <1> %define VC_CPUID_RESULT_ECX         8
   146                              <1> %define VC_CPUID_RESULT_EDX        12
   147                              <1> %define VC_GHCB_MSR_EDX            16
   148                              <1> %define VC_GHCB_MSR_EAX            20
   149                              <1> %define VC_CPUID_REQUEST_REGISTER  24
   150                              <1> %define VC_CPUID_FUNCTION          28
   151                              <1> 
   152                              <1> ; #VC handler total local variable size
   153                              <1> ;
   154                              <1> %define VC_VARIABLE_SIZE           32
   155                              <1> 
   156                              <1> ; #VC handler GHCB CPUID request/response protocol values
   157                              <1> ;
   158                              <1> %define GHCB_CPUID_REQUEST          4
   159                              <1> %define GHCB_CPUID_RESPONSE         5
   160                              <1> %define GHCB_CPUID_REGISTER_SHIFT  30
   161                              <1> %define CPUID_INSN_LEN              2
   162                              <1> 
   163                              <1> ; #VC handler offsets/sizes for accessing SNP CPUID page
   164                              <1> ;
   165                              <1> %define SNP_CPUID_ENTRY_SZ         48
   166                              <1> %define SNP_CPUID_COUNT             0
   167                              <1> %define SNP_CPUID_ENTRY            16
   168                              <1> %define SNP_CPUID_ENTRY_EAX_IN      0
   169                              <1> %define SNP_CPUID_ENTRY_ECX_IN      4
   170                              <1> %define SNP_CPUID_ENTRY_EAX        24
   171                              <1> %define SNP_CPUID_ENTRY_EBX        28
   172                              <1> %define SNP_CPUID_ENTRY_ECX        32
   173                              <1> %define SNP_CPUID_ENTRY_EDX        36
   174                              <1> 
   175                              <1> 
   176                              <1> %define SEV_GHCB_MSR                0xc0010130
   177                              <1> %define SEV_STATUS_MSR              0xc0010131
   178                              <1> 
   179                              <1> ; The #VC was not for CPUID
   180                              <1> %define TERM_VC_NOT_CPUID           1
   181                              <1> 
   182                              <1> ; The unexpected response code
   183                              <1> %define TERM_UNEXPECTED_RESP_CODE   2
   184                              <1> 
   185                              <1> %define PAGE_PRESENT            0x01
   186                              <1> %define PAGE_READ_WRITE         0x02
   187                              <1> %define PAGE_USER_SUPERVISOR    0x04
   188                              <1> %define PAGE_WRITE_THROUGH      0x08
   189                              <1> %define PAGE_CACHE_DISABLE     0x010
   190                              <1> %define PAGE_ACCESSED          0x020
   191                              <1> %define PAGE_DIRTY             0x040
   192                              <1> %define PAGE_PAT               0x080
   193                              <1> %define PAGE_GLOBAL           0x0100
   194                              <1> %define PAGE_2M_MBO            0x080
   195                              <1> %define PAGE_2M_PAT          0x01000
   196                              <1> 
   197                              <1> %define PAGE_4K_PDE_ATTR (PAGE_ACCESSED +                           PAGE_DIRTY +                           PAGE_READ_WRITE +                           PAGE_PRESENT)
   201                              <1> 
   202                              <1> %define PAGE_PDP_ATTR (PAGE_ACCESSED +                        PAGE_READ_WRITE +                        PAGE_PRESENT)
   205                              <1> 
   206                              <1> 
   207                              <1> ; Macro is used to issue the MSR protocol based VMGEXIT. The caller is
   208                              <1> ; responsible to populate values in the EDX:EAX registers. After the vmmcall
   209                              <1> ; returns, it verifies that the response code matches with the expected
   210                              <1> ; code. If it does not match then terminate the guest. The result of request
   211                              <1> ; is returned in the EDX:EAX.
   212                              <1> ;
   213                              <1> ; args 1:Request code, 2: Response code
   214                              <1> %macro VmgExit 2
   215                              <1>     ;
   216                              <1>     ; Add request code:
   217                              <1>     ;   GHCB_MSR[11:0]  = Request code
   218                              <1>     or      eax, %1
   219                              <1> 
   220                              <1>     mov     ecx, SEV_GHCB_MSR
   221                              <1>     wrmsr
   222                              <1> 
   223                              <1>     ; Issue VMGEXIT - NASM doesn't support the vmmcall instruction in 32-bit
   224                              <1>     ; mode, so work around this by temporarily switching to 64-bit mode.
   225                              <1>     ;
   226                              <1> BITS    64
   227                              <1>     rep     vmmcall
   228                              <1> BITS    32
   229                              <1> 
   230                              <1>     mov     ecx, SEV_GHCB_MSR
   231                              <1>     rdmsr
   232                              <1> 
   233                              <1>     ;
   234                              <1>     ; Verify the reponse code, if it does not match then request to terminate
   235                              <1>     ;   GHCB_MSR[11:0]  = Response code
   236                              <1>     mov     ecx, eax
   237                              <1>     and     ecx, 0xfff
   238                              <1>     cmp     ecx, %2
   239                              <1>     jne     SevEsUnexpectedRespTerminate
   240                              <1> %endmacro
   241                              <1> 
   242                              <1> ; Macro to terminate the guest using the VMGEXIT.
   243                              <1> ; arg 1: reason code
   244                              <1> %macro TerminateVmgExit 1
   245                              <1>     mov     eax, %1
   246                              <1>     ;
   247                              <1>     ; Use VMGEXIT to request termination. At this point the reason code is
   248                              <1>     ; located in EAX, so shift it left 16 bits to the proper location.
   249                              <1>     ;
   250                              <1>     ; EAX[11:0]  => 0x100 - request termination
   251                              <1>     ; EAX[15:12] => 0x1   - OVMF
   252                              <1>     ; EAX[23:16] => 0xXX  - REASON CODE
   253                              <1>     ;
   254                              <1>     shl     eax, 16
   255                              <1>     or      eax, 0x1100
   256                              <1>     xor     edx, edx
   257                              <1>     mov     ecx, SEV_GHCB_MSR
   258                              <1>     wrmsr
   259                              <1>     ;
   260                              <1>     ; Issue VMGEXIT - NASM doesn't support the vmmcall instruction in 32-bit
   261                              <1>     ; mode, so work around this by temporarily switching to 64-bit mode.
   262                              <1>     ;
   263                              <1> BITS    64
   264                              <1>     rep     vmmcall
   265                              <1> BITS    32
   266                              <1> 
   267                              <1>     ;
   268                              <1>     ; We shouldn't come back from the VMGEXIT, but if we do, just loop.
   269                              <1>     ;
   270                              <1> %%TerminateHlt:
   271                              <1>     hlt
   272                              <1>     jmp     %%TerminateHlt
   273                              <1> %endmacro
   274                              <1> 
   275                              <1> ; Terminate the guest due to unexpected response code.
   276                              <1> SevEsUnexpectedRespTerminate:
   277                              <1>     TerminateVmgExit    TERM_UNEXPECTED_RESP_CODE
   245 00000289 B802000000          <2>  mov eax, %1
   246                              <2> 
   247                              <2> 
   248                              <2> 
   249                              <2> 
   250                              <2> 
   251                              <2> 
   252                              <2> 
   253                              <2> 
   254 0000028E C1E010              <2>  shl eax, 16
   255 00000291 0D00110000          <2>  or eax, 0x1100
   256 00000296 31D2                <2>  xor edx, edx
   257 00000298 B9300101C0          <2>  mov ecx, SEV_GHCB_MSR
   258 0000029D 0F30                <2>  wrmsr
   259                              <2> 
   260                              <2> 
   261                              <2> 
   262                              <2> 
   263                              <2> BITS 64
   264 0000029F F30F01D9            <2>  rep vmmcall
   265                              <2> BITS 32
   266                              <2> 
   267                              <2> 
   268                              <2> 
   269                              <2> 
   270                              <2> %%TerminateHlt:
   271 000002A3 F4                  <2>  hlt
   272 000002A4 EBFD                <2>  jmp %%TerminateHlt
   278                              <1> 
   279                              <1> ; If SEV-ES is enabled then initialize and make the GHCB page shared
   280                              <1> SevClearPageEncMaskForGhcbPage:
   281                              <1>     ; Check if SEV is enabled
   282 000002A6 803D00B0800001      <1>     cmp       byte[WORK_AREA_GUEST_TYPE], 1
   283 000002AD 754D                <1>     jnz       SevClearPageEncMaskForGhcbPageExit
   284                              <1> 
   285                              <1>     ; Check if SEV-ES is enabled
   286 000002AF 803D04B0800001      <1>     cmp       byte[SEV_ES_WORK_AREA], 1
   287 000002B6 7544                <1>     jnz       SevClearPageEncMaskForGhcbPageExit
   288                              <1> 
   289                              <1>     ;
   290                              <1>     ; The initial GHCB will live at GHCB_BASE and needs to be un-encrypted.
   291                              <1>     ; This requires the 2MB page for this range be broken down into 512 4KB
   292                              <1>     ; pages.  All will be marked encrypted, except for the GHCB.
   293                              <1>     ;
   294 000002B8 B904000000          <1>     mov     ecx, (GHCB_BASE >> 21)
   295 000002BD B823808000          <1>     mov     eax, GHCB_PT_ADDR + PAGE_PDP_ATTR
   296 000002C2 8904CD00208000      <1>     mov     [ecx * 8 + PT_ADDR (0x2000)], eax
   297                              <1> 
   298                              <1>     ;
   299                              <1>     ; Page Table Entries (512 * 4KB entries => 2MB)
   300                              <1>     ;
   301 000002C9 B900020000          <1>     mov     ecx, 512
   302                              <1> pageTableEntries4kLoop:
   303 000002CE 89C8                <1>     mov     eax, ecx
   304 000002D0 48                  <1>     dec     eax
   305 000002D1 C1E00C              <1>     shl     eax, 12
   306 000002D4 0500008000          <1>     add     eax, GHCB_BASE & 0xFFE0_0000
   307 000002D9 83C063              <1>     add     eax, PAGE_4K_PDE_ATTR
   308 000002DC 8904CDF87F8000      <1>     mov     [ecx * 8 + GHCB_PT_ADDR - 8], eax
   309 000002E3 8914CDFC7F8000      <1>     mov     [(ecx * 8 + GHCB_PT_ADDR - 8) + 4], edx
   310 000002EA E2E2                <1>     loop    pageTableEntries4kLoop
   311                              <1> 
   312                              <1>     ;
   313                              <1>     ; Clear the encryption bit from the GHCB entry
   314                              <1>     ;
   315 000002EC B909000000          <1>     mov     ecx, (GHCB_BASE & 0x1F_FFFF) >> 12
   316 000002F1 C704CD048080000000- <1>     mov     [ecx * 8 + GHCB_PT_ADDR + 4], strict dword 0
   316 000002FA 0000                <1>
   317                              <1> 
   318                              <1> SevClearPageEncMaskForGhcbPageExit:
   319                              <1>     OneTimeCallRet SevClearPageEncMaskForGhcbPage
    54 000002FC E9A1030000          <2>  jmp %1 %+ OneTimerCallReturn
   320                              <1> 
   321                              <1> ; Check if SEV is enabled, and get the C-bit mask above 31.
   322                              <1> ; Modified: EDX
   323                              <1> ;
   324                              <1> ; The value is returned in the EDX
   325                              <1> GetSevCBitMaskAbove31:
   326 00000301 31D2                <1>     xor       edx, edx
   327                              <1> 
   328                              <1>     ; Check if SEV is enabled
   329 00000303 803D00B0800001      <1>     cmp       byte[WORK_AREA_GUEST_TYPE], 1
   330 0000030A 7506                <1>     jnz       GetSevCBitMaskAbove31Exit
   331                              <1> 
   332 0000030C 8B1518B08000        <1>     mov       edx, dword[SEV_ES_WORK_AREA_ENC_MASK + 4]
   333                              <1> 
   334                              <1> GetSevCBitMaskAbove31Exit:
   335                              <1>     OneTimeCallRet GetSevCBitMaskAbove31
    54 00000312 E906030000          <2>  jmp %1 %+ OneTimerCallReturn
   336                              <1> 
   337                              <1> ; Check if Secure Encrypted Virtualization (SEV) features are enabled.
   338                              <1> ;
   339                              <1> ; Register usage is tight in this routine, so multiple calls for the
   340                              <1> ; same CPUID and MSR data are performed to keep things simple.
   341                              <1> ;
   342                              <1> ; Modified:  EAX, EBX, ECX, EDX, ESP
   343                              <1> ;
   344                              <1> ; If SEV is enabled then EAX will be at least 32.
   345                              <1> ; If SEV is disabled then EAX will be zero.
   346                              <1> ;
   347                              <1> CheckSevFeatures:
   348                              <1>     ; Set the first byte of the workarea to zero to communicate to the SEC
   349                              <1>     ; phase that SEV-ES is not enabled. If SEV-ES is enabled, the CPUID
   350                              <1>     ; instruction will trigger a #VC exception where the first byte of the
   351                              <1>     ; workarea will be set to one or, if CPUID is not being intercepted,
   352                              <1>     ; the MSR check below will set the first byte of the workarea to one.
   353 00000317 C60504B0800000      <1>     mov     byte[SEV_ES_WORK_AREA], 0
   354                              <1> 
   355                              <1>     ;
   356                              <1>     ; Set up exception handlers to check for SEV-ES
   357                              <1>     ;   Load temporary RAM stack based on PCDs (see SevEsIdtVmmComm for
   358                              <1>     ;   stack usage)
   359                              <1>     ;   Establish exception handlers
   360                              <1>     ;
   361 0000031E BC00008200          <1>     mov       esp, SEV_ES_VC_TOP_OF_STACK
   362 00000323 B892FBFFFF          <1>     mov       eax, ADDR_OF(Idtr)
   363 00000328 2E0F0118            <1>     lidt      [cs:eax]
   364                              <1> 
   365                              <1>     ; Check if we have a valid (0x8000_001F) CPUID leaf
   366                              <1>     ;   CPUID raises a #VC exception if running as an SEV-ES guest
   367 0000032C B800000080          <1>     mov       eax, 0x80000000
   368 00000331 0FA2                <1>     cpuid
   369                              <1> 
   370                              <1>     ; This check should fail on Intel or Non SEV AMD CPUs. In future if
   371                              <1>     ; Intel CPUs supports this CPUID leaf then we are guranteed to have exact
   372                              <1>     ; same bit definition.
   373 00000333 3D1F000080          <1>     cmp       eax, 0x8000001f
   374 00000338 7C67                <1>     jl        NoSev
   375                              <1> 
   376                              <1>     ; Check for SEV memory encryption feature:
   377                              <1>     ; CPUID  Fn8000_001F[EAX] - Bit 1
   378                              <1>     ;   CPUID raises a #VC exception if running as an SEV-ES guest
   379 0000033A B81F000080          <1>     mov       eax, 0x8000001f
   380 0000033F 0FA2                <1>     cpuid
   381 00000341 0FBAE001            <1>     bt        eax, 1
   382 00000345 735A                <1>     jnc       NoSev
   383                              <1> 
   384                              <1>     ; Check if SEV memory encryption is enabled
   385                              <1>     ;  MSR_0xC0010131 - Bit 0 (SEV enabled)
   386 00000347 B9310101C0          <1>     mov       ecx, SEV_STATUS_MSR
   387 0000034C 0F32                <1>     rdmsr
   388 0000034E 0FBAE000            <1>     bt        eax, 0
   389 00000352 734D                <1>     jnc       NoSev
   390                              <1> 
   391                              <1>     ; Set the work area header to indicate that the SEV is enabled
   392 00000354 C60500B0800001      <1>     mov     byte[WORK_AREA_GUEST_TYPE], 1
   393                              <1> 
   394                              <1>     ; Check for SEV-ES memory encryption feature:
   395                              <1>     ; CPUID  Fn8000_001F[EAX] - Bit 3
   396                              <1>     ;   CPUID raises a #VC exception if running as an SEV-ES guest
   397 0000035B B81F000080          <1>     mov       eax, 0x8000001f
   398 00000360 0FA2                <1>     cpuid
   399 00000362 0FBAE003            <1>     bt        eax, 3
   400 00000366 7314                <1>     jnc       GetSevEncBit
   401                              <1> 
   402                              <1>     ; Check if SEV-ES is enabled
   403                              <1>     ;  MSR_0xC0010131 - Bit 1 (SEV-ES enabled)
   404 00000368 B9310101C0          <1>     mov       ecx, SEV_STATUS_MSR
   405 0000036D 0F32                <1>     rdmsr
   406 0000036F 0FBAE001            <1>     bt        eax, 1
   407 00000373 7307                <1>     jnc       GetSevEncBit
   408                              <1> 
   409                              <1>     ; Set the first byte of the workarea to one to communicate to the SEC
   410                              <1>     ; phase that SEV-ES is enabled.
   411 00000375 C60504B0800001      <1>     mov       byte[SEV_ES_WORK_AREA], 1
   412                              <1> 
   413                              <1> GetSevEncBit:
   414                              <1>     ; Get pte bit position to enable memory encryption
   415                              <1>     ; CPUID Fn8000_001F[EBX] - Bits 5:0
   416                              <1>     ;
   417 0000037C 83E33F              <1>     and       ebx, 0x3f
   418 0000037F 89D8                <1>     mov       eax, ebx
   419                              <1> 
   420                              <1>     ; The encryption bit position is always above 31
   421 00000381 83EB20              <1>     sub       ebx, 32
   422 00000384 7904                <1>     jns       SevSaveMask
   423                              <1> 
   424                              <1>     ; Encryption bit was reported as 31 or below, enter a HLT loop
   425                              <1> SevEncBitLowHlt:
   426 00000386 FA                  <1>     cli
   427 00000387 F4                  <1>     hlt
   428 00000388 EBFC                <1>     jmp       SevEncBitLowHlt
   429                              <1> 
   430                              <1> SevSaveMask:
   431 0000038A 31D2                <1>     xor       edx, edx
   432 0000038C 0FABDA              <1>     bts       edx, ebx
   433                              <1> 
   434 0000038F C70514B08000000000- <1>     mov       dword[SEV_ES_WORK_AREA_ENC_MASK], 0
   434 00000398 00                  <1>
   435 00000399 891518B08000        <1>     mov       dword[SEV_ES_WORK_AREA_ENC_MASK + 4], edx
   436 0000039F EB0F                <1>     jmp       SevExit
   437                              <1> 
   438                              <1> NoSev:
   439                              <1>     ;
   440                              <1>     ; Perform an SEV-ES sanity check by seeing if a #VC exception occurred.
   441                              <1>     ;
   442 000003A1 803D04B0800000      <1>     cmp       byte[SEV_ES_WORK_AREA], 0
   443 000003A8 7404                <1>     jz        NoSevPass
   444                              <1> 
   445                              <1>     ;
   446                              <1>     ; A #VC was received, yet CPUID indicates no SEV-ES support, something
   447                              <1>     ; isn't right.
   448                              <1>     ;
   449                              <1> NoSevEsVcHlt:
   450 000003AA FA                  <1>     cli
   451 000003AB F4                  <1>     hlt
   452 000003AC EBFC                <1>     jmp       NoSevEsVcHlt
   453                              <1> 
   454                              <1> NoSevPass:
   455 000003AE 31C0                <1>     xor       eax, eax
   456                              <1> 
   457                              <1> SevExit:
   458                              <1>     ;
   459                              <1>     ; Clear exception handlers and stack
   460                              <1>     ;
   461 000003B0 50                  <1>     push      eax
   462 000003B1 B898FBFFFF          <1>     mov       eax, ADDR_OF(IdtrClear)
   463 000003B6 2E0F0118            <1>     lidt      [cs:eax]
   464 000003BA 58                  <1>     pop       eax
   465 000003BB BC00000000          <1>     mov       esp, 0
   466                              <1> 
   467                              <1>     OneTimeCallRet CheckSevFeatures
    54 000003C0 E953020000          <2>  jmp %1 %+ OneTimerCallReturn
   468                              <1> 
   469                              <1> ; Start of #VC exception handling routines
   470                              <1> ;
   471                              <1> 
   472                              <1> SevEsIdtNotCpuid:
   473                              <1>     TerminateVmgExit TERM_VC_NOT_CPUID
   245 000003C5 B801000000          <2>  mov eax, %1
   246                              <2> 
   247                              <2> 
   248                              <2> 
   249                              <2> 
   250                              <2> 
   251                              <2> 
   252                              <2> 
   253                              <2> 
   254 000003CA C1E010              <2>  shl eax, 16
   255 000003CD 0D00110000          <2>  or eax, 0x1100
   256 000003D2 31D2                <2>  xor edx, edx
   257 000003D4 B9300101C0          <2>  mov ecx, SEV_GHCB_MSR
   258 000003D9 0F30                <2>  wrmsr
   259                              <2> 
   260                              <2> 
   261                              <2> 
   262                              <2> 
   263                              <2> BITS 64
   264 000003DB F30F01D9            <2>  rep vmmcall
   265                              <2> BITS 32
   266                              <2> 
   267                              <2> 
   268                              <2> 
   269                              <2> 
   270                              <2> %%TerminateHlt:
   271 000003DF F4                  <2>  hlt
   272 000003E0 EBFD                <2>  jmp %%TerminateHlt
   474 000003E2 CF                  <1>     iret
   475                              <1> 
   476                              <1> ; Use the SNP CPUID page to handle the cpuid lookup
   477                              <1> ;
   478                              <1> ;  Modified: EAX, EBX, ECX, EDX
   479                              <1> ;
   480                              <1> ;  Relies on the stack setup/usage in #VC handler:
   481                              <1> ;
   482                              <1> ;    On entry,
   483                              <1> ;      [esp + VC_CPUID_FUNCTION] contains EAX input to cpuid instruction
   484                              <1> ;
   485                              <1> ;    On return, stores corresponding results of CPUID lookup in:
   486                              <1> ;      [esp + VC_CPUID_RESULT_EAX]
   487                              <1> ;      [esp + VC_CPUID_RESULT_EBX]
   488                              <1> ;      [esp + VC_CPUID_RESULT_ECX]
   489                              <1> ;      [esp + VC_CPUID_RESULT_EDX]
   490                              <1> ;
   491                              <1> SnpCpuidLookup:
   492 000003E3 8B44241C            <1>     mov     eax, [esp + VC_CPUID_FUNCTION]
   493 000003E7 8B1D00E08000        <1>     mov     ebx, [CPUID_BASE + SNP_CPUID_COUNT]
   494 000003ED B910E08000          <1>     mov     ecx, CPUID_BASE + SNP_CPUID_ENTRY
   495                              <1>     ; Zero these out now so we can simply return if lookup fails
   496 000003F2 C7042400000000      <1>     mov     dword[esp + VC_CPUID_RESULT_EAX], 0
   497 000003F9 C744240400000000    <1>     mov     dword[esp + VC_CPUID_RESULT_EBX], 0
   498 00000401 C744240800000000    <1>     mov     dword[esp + VC_CPUID_RESULT_ECX], 0
   499 00000409 C744240C00000000    <1>     mov     dword[esp + VC_CPUID_RESULT_EDX], 0
   500                              <1> 
   501                              <1> SnpCpuidCheckEntry:
   502 00000411 83FB00              <1>     cmp     ebx, 0
   503 00000414 0F84C0000000        <1>     je      VmmDoneSnpCpuid
   504 0000041A 3901                <1>     cmp     dword[ecx + SNP_CPUID_ENTRY_EAX_IN], eax
   505 0000041C 7506                <1>     jne     SnpCpuidCheckEntryNext
   506                              <1>     ; As with SEV-ES handler we assume requested CPUID sub-leaf/index is 0
   507 0000041E 83790400            <1>     cmp     dword[ecx + SNP_CPUID_ENTRY_ECX_IN], 0
   508 00000422 7406                <1>     je      SnpCpuidEntryFound
   509                              <1> 
   510                              <1> SnpCpuidCheckEntryNext:
   511 00000424 4B                  <1>     dec     ebx
   512 00000425 83C130              <1>     add     ecx, SNP_CPUID_ENTRY_SZ
   513 00000428 EBE7                <1>     jmp     SnpCpuidCheckEntry
   514                              <1> 
   515                              <1> SnpCpuidEntryFound:
   516 0000042A 8B4118              <1>     mov     eax, [ecx + SNP_CPUID_ENTRY_EAX]
   517 0000042D 890424              <1>     mov     [esp + VC_CPUID_RESULT_EAX], eax
   518 00000430 8B411C              <1>     mov     eax, [ecx + SNP_CPUID_ENTRY_EBX]
   519 00000433 89442404            <1>     mov     [esp + VC_CPUID_RESULT_EBX], eax
   520 00000437 8B4124              <1>     mov     eax, [ecx + SNP_CPUID_ENTRY_EDX]
   521 0000043A 89442408            <1>     mov     [esp + VC_CPUID_RESULT_ECX], eax
   522 0000043E 8B4120              <1>     mov     eax, [ecx + SNP_CPUID_ENTRY_ECX]
   523 00000441 8944240C            <1>     mov     [esp + VC_CPUID_RESULT_EDX], eax
   524 00000445 E990000000          <1>     jmp     VmmDoneSnpCpuid
   525                              <1> 
   526                              <1> ;
   527                              <1> ; Total stack usage for the #VC handler is 44 bytes:
   528                              <1> ;   - 12 bytes for the exception IRET (after popping error code)
   529                              <1> ;   - 32 bytes for the local variables.
   530                              <1> ;
   531                              <1> SevEsIdtVmmComm:
   532                              <1>     ;
   533                              <1>     ; If we're here, then we are an SEV-ES guest and this
   534                              <1>     ; was triggered by a CPUID instruction
   535                              <1>     ;
   536                              <1>     ; Set the first byte of the workarea to one to communicate that
   537                              <1>     ; a #VC was taken.
   538 0000044A C60504B0800001      <1>     mov     byte[SEV_ES_WORK_AREA], 1
   539                              <1> 
   540 00000451 59                  <1>     pop     ecx                     ; Error code
   541 00000452 83F972              <1>     cmp     ecx, 0x72               ; Be sure it was CPUID
   542 00000455 0F856AFFFFFF        <1>     jne     SevEsIdtNotCpuid
   543                              <1> 
   544                              <1>     ; Set up local variable room on the stack
   545                              <1>     ;   CPUID function         : + 28
   546                              <1>     ;   CPUID request register : + 24
   547                              <1>     ;   GHCB MSR (EAX)         : + 20
   548                              <1>     ;   GHCB MSR (EDX)         : + 16
   549                              <1>     ;   CPUID result (EDX)     : + 12
   550                              <1>     ;   CPUID result (ECX)     : + 8
   551                              <1>     ;   CPUID result (EBX)     : + 4
   552                              <1>     ;   CPUID result (EAX)     : + 0
   553 0000045B 83EC20              <1>     sub     esp, VC_VARIABLE_SIZE
   554                              <1> 
   555                              <1>     ; Save the CPUID function being requested
   556 0000045E 8944241C            <1>     mov     [esp + VC_CPUID_FUNCTION], eax
   557                              <1> 
   558                              <1>     ; If SEV-SNP is enabled, use the CPUID page to handle the CPUID
   559                              <1>     ; instruction.
   560 00000462 B9310101C0          <1>     mov     ecx, SEV_STATUS_MSR
   561 00000467 0F32                <1>     rdmsr
   562 00000469 0FBAE002            <1>     bt      eax, 2
   563 0000046D 0F8270FFFFFF        <1>     jc      SnpCpuidLookup
   564                              <1> 
   565                              <1>     ; The GHCB CPUID protocol uses the following mapping to request
   566                              <1>     ; a specific register:
   567                              <1>     ;   0 => EAX, 1 => EBX, 2 => ECX, 3 => EDX
   568                              <1>     ;
   569                              <1>     ; Set EAX as the first register to request. This will also be used as a
   570                              <1>     ; loop variable to request all register values (EAX to EDX).
   571 00000473 31C0                <1>     xor     eax, eax
   572 00000475 89442418            <1>     mov     [esp + VC_CPUID_REQUEST_REGISTER], eax
   573                              <1> 
   574                              <1>     ; Save current GHCB MSR value
   575 00000479 B9300101C0          <1>     mov     ecx, SEV_GHCB_MSR
   576 0000047E 0F32                <1>     rdmsr
   577 00000480 89442414            <1>     mov     [esp + VC_GHCB_MSR_EAX], eax
   578 00000484 89542410            <1>     mov     [esp + VC_GHCB_MSR_EDX], edx
   579                              <1> 
   580                              <1> NextReg:
   581                              <1>     ;
   582                              <1>     ; Setup GHCB MSR
   583                              <1>     ;   GHCB_MSR[63:32] = CPUID function
   584                              <1>     ;   GHCB_MSR[31:30] = CPUID register
   585                              <1>     ;   GHCB_MSR[11:0]  = CPUID request protocol
   586                              <1>     ;
   587 00000488 8B442418            <1>     mov     eax, [esp + VC_CPUID_REQUEST_REGISTER]
   588 0000048C 83F804              <1>     cmp     eax, 4
   589 0000048F 7D3A                <1>     jge     VmmDone
   590                              <1> 
   591 00000491 C1E01E              <1>     shl     eax, GHCB_CPUID_REGISTER_SHIFT
   592 00000494 8B54241C            <1>     mov     edx, [esp + VC_CPUID_FUNCTION]
   593                              <1> 
   594                              <1>     VmgExit GHCB_CPUID_REQUEST, GHCB_CPUID_RESPONSE
   215                              <2> 
   216                              <2> 
   217                              <2> 
   218 00000498 83C804              <2>  or eax, %1
   219                              <2> 
   220 0000049B B9300101C0          <2>  mov ecx, SEV_GHCB_MSR
   221 000004A0 0F30                <2>  wrmsr
   222                              <2> 
   223                              <2> 
   224                              <2> 
   225                              <2> 
   226                              <2> BITS 64
   227 000004A2 F30F01D9            <2>  rep vmmcall
   228                              <2> BITS 32
   229                              <2> 
   230 000004A6 B9300101C0          <2>  mov ecx, SEV_GHCB_MSR
   231 000004AB 0F32                <2>  rdmsr
   232                              <2> 
   233                              <2> 
   234                              <2> 
   235                              <2> 
   236 000004AD 89C1                <2>  mov ecx, eax
   237 000004AF 81E1FF0F0000        <2>  and ecx, 0xfff
   238 000004B5 83F905              <2>  cmp ecx, %2
   239 000004B8 0F85CBFDFFFF        <2>  jne SevEsUnexpectedRespTerminate
   595                              <1> 
   596                              <1>     ;
   597                              <1>     ; Response GHCB MSR
   598                              <1>     ;   GHCB_MSR[63:32] = CPUID register value
   599                              <1>     ;   GHCB_MSR[31:30] = CPUID register
   600                              <1>     ;   GHCB_MSR[11:0]  = CPUID response protocol
   601                              <1>     ;
   602                              <1> 
   603                              <1>     ; Save returned value
   604 000004BE C1E81E              <1>     shr     eax, GHCB_CPUID_REGISTER_SHIFT
   605 000004C1 891484              <1>     mov     [esp + eax * 4], edx
   606                              <1> 
   607                              <1>     ; Next register
   608 000004C4 66FF442418          <1>     inc     word [esp + VC_CPUID_REQUEST_REGISTER]
   609                              <1> 
   610 000004C9 EBBD                <1>     jmp     NextReg
   611                              <1> 
   612                              <1> VmmDone:
   613                              <1>     ;
   614                              <1>     ; At this point we have all CPUID register values. Restore the GHCB MSR,
   615                              <1>     ; set the return register values and return.
   616                              <1>     ;
   617 000004CB 8B442414            <1>     mov     eax, [esp + VC_GHCB_MSR_EAX]
   618 000004CF 8B542410            <1>     mov     edx, [esp + VC_GHCB_MSR_EDX]
   619 000004D3 B9300101C0          <1>     mov     ecx, SEV_GHCB_MSR
   620 000004D8 0F30                <1>     wrmsr
   621                              <1> 
   622                              <1> VmmDoneSnpCpuid:
   623 000004DA 8B0424              <1>     mov     eax, [esp + VC_CPUID_RESULT_EAX]
   624 000004DD 8B5C2404            <1>     mov     ebx, [esp + VC_CPUID_RESULT_EBX]
   625 000004E1 8B4C2408            <1>     mov     ecx, [esp + VC_CPUID_RESULT_ECX]
   626 000004E5 8B54240C            <1>     mov     edx, [esp + VC_CPUID_RESULT_EDX]
   627                              <1> 
   628 000004E9 83C420              <1>     add     esp, VC_VARIABLE_SIZE
   629                              <1> 
   630                              <1>     ; Update the EIP value to skip over the now handled CPUID instruction
   631                              <1>     ; (the CPUID instruction has a length of 2)
   632 000004EC 6683042402          <1>     add     word [esp], CPUID_INSN_LEN
   633 000004F1 CF                  <1>     iret
   634                              <1> 
   635                              <1> ALIGN   2
   636                              <1> 
   637                              <1> Idtr:
   638 000004F2 FF00                <1>     dw      IDT_END - IDT_BASE - 1  ; Limit
   639 000004F4 A0FBFFFF            <1>     dd      ADDR_OF(IDT_BASE)       ; Base
   640                              <1> 
   641                              <1> IdtrClear:
   642 000004F8 0000                <1>     dw      0                       ; Limit
   643 000004FA 00000000            <1>     dd      0                       ; Base
   644                              <1> 
   645 000004FE 90<rep 2h>          <1> ALIGN   16
   646                              <1> 
   647                              <1> ;
   648                              <1> ; The Interrupt Descriptor Table (IDT)
   649                              <1> ;   This will be used to determine if SEV-ES is enabled.  Upon execution
   650                              <1> ;   of the CPUID instruction, a VMM Communication Exception will occur.
   651                              <1> ;   This will tell us if SEV-ES is enabled.  We can use the current value
   652                              <1> ;   of the GHCB MSR to determine the SEV attributes.
   653                              <1> ;
   654                              <1> IDT_BASE:
   655                              <1> ;
   656                              <1> ; Vectors 0 - 28 (No handlers)
   657                              <1> ;
   658                              <1> %rep 29
   659                              <1>     dw      0                                    ; Offset low bits 15..0
   660                              <1>     dw      0x10                                 ; Selector
   661                              <1>     db      0                                    ; Reserved
   662                              <1>     db      0x8E                                 ; Gate Type (IA32_IDT_GATE_TYPE_INTERRUPT_32)
   663                              <1>     dw      0                                    ; Offset high bits 31..16
   664                              <1> %endrep
   659 00000500 0000                <2>  dw 0
   660 00000502 1000                <2>  dw 0x10
   661 00000504 00                  <2>  db 0
   662 00000505 8E                  <2>  db 0x8E
   663 00000506 0000                <2>  dw 0
   659 00000508 0000                <2>  dw 0
   660 0000050A 1000                <2>  dw 0x10
   661 0000050C 00                  <2>  db 0
   662 0000050D 8E                  <2>  db 0x8E
   663 0000050E 0000                <2>  dw 0
   659 00000510 0000                <2>  dw 0
   660 00000512 1000                <2>  dw 0x10
   661 00000514 00                  <2>  db 0
   662 00000515 8E                  <2>  db 0x8E
   663 00000516 0000                <2>  dw 0
   659 00000518 0000                <2>  dw 0
   660 0000051A 1000                <2>  dw 0x10
   661 0000051C 00                  <2>  db 0
   662 0000051D 8E                  <2>  db 0x8E
   663 0000051E 0000                <2>  dw 0
   659 00000520 0000                <2>  dw 0
   660 00000522 1000                <2>  dw 0x10
   661 00000524 00                  <2>  db 0
   662 00000525 8E                  <2>  db 0x8E
   663 00000526 0000                <2>  dw 0
   659 00000528 0000                <2>  dw 0
   660 0000052A 1000                <2>  dw 0x10
   661 0000052C 00                  <2>  db 0
   662 0000052D 8E                  <2>  db 0x8E
   663 0000052E 0000                <2>  dw 0
   659 00000530 0000                <2>  dw 0
   660 00000532 1000                <2>  dw 0x10
   661 00000534 00                  <2>  db 0
   662 00000535 8E                  <2>  db 0x8E
   663 00000536 0000                <2>  dw 0
   659 00000538 0000                <2>  dw 0
   660 0000053A 1000                <2>  dw 0x10
   661 0000053C 00                  <2>  db 0
   662 0000053D 8E                  <2>  db 0x8E
   663 0000053E 0000                <2>  dw 0
   659 00000540 0000                <2>  dw 0
   660 00000542 1000                <2>  dw 0x10
   661 00000544 00                  <2>  db 0
   662 00000545 8E                  <2>  db 0x8E
   663 00000546 0000                <2>  dw 0
   659 00000548 0000                <2>  dw 0
   660 0000054A 1000                <2>  dw 0x10
   661 0000054C 00                  <2>  db 0
   662 0000054D 8E                  <2>  db 0x8E
   663 0000054E 0000                <2>  dw 0
   659 00000550 0000                <2>  dw 0
   660 00000552 1000                <2>  dw 0x10
   661 00000554 00                  <2>  db 0
   662 00000555 8E                  <2>  db 0x8E
   663 00000556 0000                <2>  dw 0
   659 00000558 0000                <2>  dw 0
   660 0000055A 1000                <2>  dw 0x10
   661 0000055C 00                  <2>  db 0
   662 0000055D 8E                  <2>  db 0x8E
   663 0000055E 0000                <2>  dw 0
   659 00000560 0000                <2>  dw 0
   660 00000562 1000                <2>  dw 0x10
   661 00000564 00                  <2>  db 0
   662 00000565 8E                  <2>  db 0x8E
   663 00000566 0000                <2>  dw 0
   659 00000568 0000                <2>  dw 0
   660 0000056A 1000                <2>  dw 0x10
   661 0000056C 00                  <2>  db 0
   662 0000056D 8E                  <2>  db 0x8E
   663 0000056E 0000                <2>  dw 0
   659 00000570 0000                <2>  dw 0
   660 00000572 1000                <2>  dw 0x10
   661 00000574 00                  <2>  db 0
   662 00000575 8E                  <2>  db 0x8E
   663 00000576 0000                <2>  dw 0
   659 00000578 0000                <2>  dw 0
   660 0000057A 1000                <2>  dw 0x10
   661 0000057C 00                  <2>  db 0
   662 0000057D 8E                  <2>  db 0x8E
   663 0000057E 0000                <2>  dw 0
   659 00000580 0000                <2>  dw 0
   660 00000582 1000                <2>  dw 0x10
   661 00000584 00                  <2>  db 0
   662 00000585 8E                  <2>  db 0x8E
   663 00000586 0000                <2>  dw 0
   659 00000588 0000                <2>  dw 0
   660 0000058A 1000                <2>  dw 0x10
   661 0000058C 00                  <2>  db 0
   662 0000058D 8E                  <2>  db 0x8E
   663 0000058E 0000                <2>  dw 0
   659 00000590 0000                <2>  dw 0
   660 00000592 1000                <2>  dw 0x10
   661 00000594 00                  <2>  db 0
   662 00000595 8E                  <2>  db 0x8E
   663 00000596 0000                <2>  dw 0
   659 00000598 0000                <2>  dw 0
   660 0000059A 1000                <2>  dw 0x10
   661 0000059C 00                  <2>  db 0
   662 0000059D 8E                  <2>  db 0x8E
   663 0000059E 0000                <2>  dw 0
   659 000005A0 0000                <2>  dw 0
   660 000005A2 1000                <2>  dw 0x10
   661 000005A4 00                  <2>  db 0
   662 000005A5 8E                  <2>  db 0x8E
   663 000005A6 0000                <2>  dw 0
   659 000005A8 0000                <2>  dw 0
   660 000005AA 1000                <2>  dw 0x10
   661 000005AC 00                  <2>  db 0
   662 000005AD 8E                  <2>  db 0x8E
   663 000005AE 0000                <2>  dw 0
   659 000005B0 0000                <2>  dw 0
   660 000005B2 1000                <2>  dw 0x10
   661 000005B4 00                  <2>  db 0
   662 000005B5 8E                  <2>  db 0x8E
   663 000005B6 0000                <2>  dw 0
   659 000005B8 0000                <2>  dw 0
   660 000005BA 1000                <2>  dw 0x10
   661 000005BC 00                  <2>  db 0
   662 000005BD 8E                  <2>  db 0x8E
   663 000005BE 0000                <2>  dw 0
   659 000005C0 0000                <2>  dw 0
   660 000005C2 1000                <2>  dw 0x10
   661 000005C4 00                  <2>  db 0
   662 000005C5 8E                  <2>  db 0x8E
   663 000005C6 0000                <2>  dw 0
   659 000005C8 0000                <2>  dw 0
   660 000005CA 1000                <2>  dw 0x10
   661 000005CC 00                  <2>  db 0
   662 000005CD 8E                  <2>  db 0x8E
   663 000005CE 0000                <2>  dw 0
   659 000005D0 0000                <2>  dw 0
   660 000005D2 1000                <2>  dw 0x10
   661 000005D4 00                  <2>  db 0
   662 000005D5 8E                  <2>  db 0x8E
   663 000005D6 0000                <2>  dw 0
   659 000005D8 0000                <2>  dw 0
   660 000005DA 1000                <2>  dw 0x10
   661 000005DC 00                  <2>  db 0
   662 000005DD 8E                  <2>  db 0x8E
   663 000005DE 0000                <2>  dw 0
   659 000005E0 0000                <2>  dw 0
   660 000005E2 1000                <2>  dw 0x10
   661 000005E4 00                  <2>  db 0
   662 000005E5 8E                  <2>  db 0x8E
   663 000005E6 0000                <2>  dw 0
   665                              <1> ;
   666                              <1> ; Vector 29 (VMM Communication Exception)
   667                              <1> ;
   668 000005E8 EAFA                <1>     dw      (ADDR_OF(SevEsIdtVmmComm) & 0xffff)  ; Offset low bits 15..0
   669 000005EA 1000                <1>     dw      0x10                                 ; Selector
   670 000005EC 00                  <1>     db      0                                    ; Reserved
   671 000005ED 8E                  <1>     db      0x8E                                 ; Gate Type (IA32_IDT_GATE_TYPE_INTERRUPT_32)
   672 000005EE FFFF                <1>     dw      (ADDR_OF(SevEsIdtVmmComm) >> 16)     ; Offset high bits 31..16
   673                              <1> ;
   674                              <1> ; Vectors 30 - 31 (No handlers)
   675                              <1> ;
   676                              <1> %rep 2
   677                              <1>     dw      0                                    ; Offset low bits 15..0
   678                              <1>     dw      0x10                                 ; Selector
   679                              <1>     db      0                                    ; Reserved
   680                              <1>     db      0x8E                                 ; Gate Type (IA32_IDT_GATE_TYPE_INTERRUPT_32)
   681                              <1>     dw      0                                    ; Offset high bits 31..16
   682                              <1> %endrep
   677 000005F0 0000                <2>  dw 0
   678 000005F2 1000                <2>  dw 0x10
   679 000005F4 00                  <2>  db 0
   680 000005F5 8E                  <2>  db 0x8E
   681 000005F6 0000                <2>  dw 0
   677 000005F8 0000                <2>  dw 0
   678 000005FA 1000                <2>  dw 0x10
   679 000005FC 00                  <2>  db 0
   680 000005FD 8E                  <2>  db 0x8E
   681 000005FE 0000                <2>  dw 0
   683                              <1> IDT_END:
   127                                  %include "Ia32/PageTables64.asm"
   128                              <1> ;------------------------------------------------------------------------------
   129                              <1> ; @file
   130                              <1> ; Sets the CR3 register for 64-bit paging
   131                              <1> ;
   132                              <1> ; Copyright (c) 2008 - 2013, Intel Corporation. All rights reserved.<BR>
   133                              <1> ; Copyright (c) 2017 - 2020, Advanced Micro Devices, Inc. All rights reserved.<BR>
   134                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
   135                              <1> ;
   136                              <1> ;------------------------------------------------------------------------------
   137                              <1> 
   138                              <1> BITS    32
   139                              <1> 
   140                              <1> %define PAGE_PRESENT            0x01
   141                              <1> %define PAGE_READ_WRITE         0x02
   142                              <1> %define PAGE_USER_SUPERVISOR    0x04
   143                              <1> %define PAGE_WRITE_THROUGH      0x08
   144                              <1> %define PAGE_CACHE_DISABLE     0x010
   145                              <1> %define PAGE_ACCESSED          0x020
   146                              <1> %define PAGE_DIRTY             0x040
   147                              <1> %define PAGE_PAT               0x080
   148                              <1> %define PAGE_GLOBAL           0x0100
   149                              <1> %define PAGE_2M_MBO            0x080
   150                              <1> %define PAGE_2M_PAT          0x01000
   151                              <1> 
   152                              <1> %define PAGE_4K_PDE_ATTR (PAGE_ACCESSED +                           PAGE_DIRTY +                           PAGE_READ_WRITE +                           PAGE_PRESENT)
   156                              <1> 
   157                              <1> %define PAGE_2M_PDE_ATTR (PAGE_2M_MBO +                           PAGE_ACCESSED +                           PAGE_DIRTY +                           PAGE_READ_WRITE +                           PAGE_PRESENT)
   162                              <1> 
   163                              <1> %define PAGE_PDP_ATTR (PAGE_ACCESSED +                        PAGE_READ_WRITE +                        PAGE_PRESENT)
   166                              <1> 
   167                              <1> %define TDX_BSP         1
   168                              <1> %define TDX_AP          2
   169                              <1> 
   170                              <1> ;
   171                              <1> ; Modified:  EAX, EBX, ECX, EDX
   172                              <1> ;
   173                              <1> SetCr3ForPageTables64:
   174                              <1>     ; Check the TDX features.
   175                              <1>     ; If it is TDX APs, then jump to SetCr3 directly.
   176                              <1>     ; In TD guest the initialization is done by BSP, including building
   177                              <1>     ; the page tables. APs will spin on until byte[TDX_WORK_AREA_PGTBL_READY]
   178                              <1>     ; is set.
   179                              <1>     OneTimeCall   CheckTdxFeaturesBeforeBuildPagetables
    49 00000600 E969010000          <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   180 00000605 83F801              <1>     cmp       eax, TDX_BSP
   181 00000608 7413                <1>     je        ClearOvmfPageTables
   182 0000060A 83F802              <1>     cmp       eax, TDX_AP
   183 0000060D 0F8494000000        <1>     je        SetCr3
   184                              <1> 
   185                              <1>     ; Check whether the SEV is active and populate the SevEsWorkArea
   186                              <1>     OneTimeCall   CheckSevFeatures
    49 00000613 E9FFFCFFFF          <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   187                              <1> 
   188                              <1>     ; If SEV is enabled, the C-bit position is always above 31.
   189                              <1>     ; The mask will be saved in the EDX and applied during the
   190                              <1>     ; the page table build below.
   191                              <1>     OneTimeCall   GetSevCBitMaskAbove31
    49 00000618 E9E4FCFFFF          <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   192                              <1> 
   193                              <1> ClearOvmfPageTables:
   194                              <1>     ;
   195                              <1>     ; For OVMF, build some initial page tables at
   196                              <1>     ; PcdOvmfSecPageTablesBase - (PcdOvmfSecPageTablesBase + 0x6000).
   197                              <1>     ;
   198                              <1>     ; This range should match with PcdOvmfSecPageTablesSize which is
   199                              <1>     ; declared in the FDF files.
   200                              <1>     ;
   201                              <1>     ; At the end of PEI, the pages tables will be rebuilt into a
   202                              <1>     ; more permanent location by DxeIpl.
   203                              <1>     ;
   204                              <1> 
   205 0000061D B900180000          <1>     mov     ecx, 6 * 0x1000 / 4
   206 00000622 31C0                <1>     xor     eax, eax
   207                              <1> clearPageTablesMemoryLoop:
   208 00000624 89048DFCFF7F00      <1>     mov     dword[ecx * 4 + PT_ADDR (0) - 4], eax
   209 0000062B E2F7                <1>     loop    clearPageTablesMemoryLoop
   210                              <1> 
   211                              <1>     ;
   212                              <1>     ; Top level Page Directory Pointers (1 * 512GB entry)
   213                              <1>     ;
   214 0000062D C70500008000231080- <1>     mov     dword[PT_ADDR (0)], PT_ADDR (0x1000) + PAGE_PDP_ATTR
   214 00000636 00                  <1>
   215 00000637 891504008000        <1>     mov     dword[PT_ADDR (4)], edx
   216                              <1> 
   217                              <1>     ;
   218                              <1>     ; Next level Page Directory Pointers (4 * 1GB entries => 4GB)
   219                              <1>     ;
   220 0000063D C70500108000232080- <1>     mov     dword[PT_ADDR (0x1000)], PT_ADDR (0x2000) + PAGE_PDP_ATTR
   220 00000646 00                  <1>
   221 00000647 891504108000        <1>     mov     dword[PT_ADDR (0x1004)], edx
   222 0000064D C70508108000233080- <1>     mov     dword[PT_ADDR (0x1008)], PT_ADDR (0x3000) + PAGE_PDP_ATTR
   222 00000656 00                  <1>
   223 00000657 89150C108000        <1>     mov     dword[PT_ADDR (0x100C)], edx
   224 0000065D C70510108000234080- <1>     mov     dword[PT_ADDR (0x1010)], PT_ADDR (0x4000) + PAGE_PDP_ATTR
   224 00000666 00                  <1>
   225 00000667 891514108000        <1>     mov     dword[PT_ADDR (0x1014)], edx
   226 0000066D C70518108000235080- <1>     mov     dword[PT_ADDR (0x1018)], PT_ADDR (0x5000) + PAGE_PDP_ATTR
   226 00000676 00                  <1>
   227 00000677 89151C108000        <1>     mov     dword[PT_ADDR (0x101C)], edx
   228                              <1> 
   229                              <1>     ;
   230                              <1>     ; Page Table Entries (2048 * 2MB entries => 4GB)
   231                              <1>     ;
   232 0000067D B900080000          <1>     mov     ecx, 0x800
   233                              <1> pageTableEntriesLoop:
   234 00000682 89C8                <1>     mov     eax, ecx
   235 00000684 48                  <1>     dec     eax
   236 00000685 C1E015              <1>     shl     eax, 21
   237 00000688 05E3000000          <1>     add     eax, PAGE_2M_PDE_ATTR
   238 0000068D 8904CDF81F8000      <1>     mov     [ecx * 8 + PT_ADDR (0x2000 - 8)], eax
   239 00000694 8914CDFC1F8000      <1>     mov     [(ecx * 8 + PT_ADDR (0x2000 - 8)) + 4], edx
   240 0000069B E2E5                <1>     loop    pageTableEntriesLoop
   241                              <1> 
   242                              <1>     ; Clear the C-bit from the GHCB page if the SEV-ES is enabled.
   243                              <1>     OneTimeCall   SevClearPageEncMaskForGhcbPage
    49 0000069D E904FCFFFF          <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   244                              <1> 
   245                              <1>     ; TDX will do some PostBuildPages task, such as setting
   246                              <1>     ; byte[TDX_WORK_AREA_PGTBL_READY].
   247                              <1>     OneTimeCall   TdxPostBuildPageTables
    49 000006A2 E9DF000000          <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   248                              <1> 
   249                              <1> SetCr3:
   250                              <1>     ;
   251                              <1>     ; Set CR3 now that the paging structures are available
   252                              <1>     ;
   253 000006A7 B800008000          <1>     mov     eax, PT_ADDR (0)
   254 000006AC 0F22D8              <1>     mov     cr3, eax
   255                              <1> 
   256                              <1>     OneTimeCallRet SetCr3ForPageTables64
    54 000006AF E951FBFFFF          <2>  jmp %1 %+ OneTimerCallReturn
   128                                  %include "Ia32/IntelTdx.asm"
   129                              <1> ;------------------------------------------------------------------------------
   130                              <1> ; @file
   131                              <1> ;   Intel TDX routines
   132                              <1> ;
   133                              <1> ; Copyright (c) 2021, Intel Corporation. All rights reserved.<BR>
   134                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
   135                              <1> ;
   136                              <1> ;------------------------------------------------------------------------------
   137                              <1> 
   138                              <1> %define VM_GUEST_TDX     2
   139                              <1> 
   140                              <1> BITS 32
   141                              <1> 
   142                              <1> ;
   143                              <1> ; Check if it is Intel Tdx
   144                              <1> ;
   145                              <1> ; Modified: EAX, EBX, ECX, EDX
   146                              <1> ;
   147                              <1> ; If it is Intel Tdx, EAX is 1
   148                              <1> ; If it is not Intel Tdx, EAX is 0
   149                              <1> ;
   150                              <1> IsTdx:
   151                              <1>     ;
   152                              <1>     ; CPUID (0)
   153                              <1>     ;
   154 000006B4 B800000000          <1>     mov     eax, 0
   155 000006B9 0FA2                <1>     cpuid
   156 000006BB 81FB47656E75        <1>     cmp     ebx, 0x756e6547  ; "Genu"
   157 000006C1 7556                <1>     jne     IsNotTdx
   158 000006C3 81FA696E6549        <1>     cmp     edx, 0x49656e69  ; "ineI"
   159 000006C9 754E                <1>     jne     IsNotTdx
   160 000006CB 81F96E74656C        <1>     cmp     ecx, 0x6c65746e  ; "ntel"
   161 000006D1 7546                <1>     jne     IsNotTdx
   162                              <1> 
   163                              <1>     ;
   164                              <1>     ; CPUID (1)
   165                              <1>     ;
   166 000006D3 B801000000          <1>     mov     eax, 1
   167 000006D8 0FA2                <1>     cpuid
   168 000006DA F7C100000080        <1>     test    ecx, 0x80000000
   169 000006E0 7437                <1>     jz      IsNotTdx
   170                              <1> 
   171                              <1>     ;
   172                              <1>     ; CPUID[0].EAX >= 0x21?
   173                              <1>     ;
   174 000006E2 B800000000          <1>     mov     eax, 0
   175 000006E7 0FA2                <1>     cpuid
   176 000006E9 83F821              <1>     cmp     eax, 0x21
   177 000006EC 7C2B                <1>     jl      IsNotTdx
   178                              <1> 
   179                              <1>     ;
   180                              <1>     ; CPUID (0x21,0)
   181                              <1>     ;
   182 000006EE B821000000          <1>     mov     eax, 0x21
   183 000006F3 B900000000          <1>     mov     ecx, 0
   184 000006F8 0FA2                <1>     cpuid
   185                              <1> 
   186 000006FA 81FB496E7465        <1>     cmp     ebx, 0x65746E49   ; "Inte"
   187 00000700 7517                <1>     jne     IsNotTdx
   188 00000702 81FA6C544458        <1>     cmp     edx, 0x5844546C   ; "lTDX"
   189 00000708 750F                <1>     jne     IsNotTdx
   190 0000070A 81F920202020        <1>     cmp     ecx, 0x20202020   ; "    "
   191 00000710 7507                <1>     jne     IsNotTdx
   192                              <1> 
   193 00000712 B801000000          <1>     mov     eax, 1
   194 00000717 EB02                <1>     jmp     ExitIsTdx
   195                              <1> 
   196                              <1> IsNotTdx:
   197 00000719 31C0                <1>     xor     eax, eax
   198                              <1> 
   199                              <1> ExitIsTdx:
   200                              <1> 
   201                              <1>   OneTimeCallRet IsTdx
    54 0000071B EB02                <2>  jmp %1 %+ OneTimerCallReturn
   202                              <1> 
   203                              <1> ;
   204                              <1> ; Initialize work area if it is Tdx guest. Detailed definition is in
   205                              <1> ; OvmfPkg/Include/WorkArea.h.
   206                              <1> ; BSP and APs all go here. Only BSP initialize this work area.
   207                              <1> ;
   208                              <1> ; Param[in] EBX[5:0]    CPU Supported GPAW (48 or 52)
   209                              <1> ; Param[in] ESI[31:0]   vCPU ID (BSP is 0, others are AP)
   210                              <1> ;
   211                              <1> ; Modified:  EBX
   212                              <1> ;
   213                              <1> InitTdxWorkarea:
   214                              <1> 
   215                              <1>     ;
   216                              <1>     ; First check if it is Tdx
   217                              <1>     ;
   218                              <1>     OneTimeCall IsTdx
    49 0000071D EB95                <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   219                              <1> 
   220 0000071F 85C0                <1>     test    eax, eax
   221 00000721 7420                <1>     jz      ExitInitTdxWorkarea
   222                              <1> 
   223 00000723 83FE00              <1>     cmp     esi, 0
   224 00000726 740B                <1>     je      TdxBspEntry
   225                              <1> 
   226                              <1>     ;
   227                              <1>     ; In Td guest, BSP/AP shares the same entry point
   228                              <1>     ; BSP builds up the page table, while APs shouldn't do the same task.
   229                              <1>     ; Instead, APs just leverage the page table which is built by BSP.
   230                              <1>     ; APs will wait until the page table is ready.
   231                              <1>     ;
   232                              <1> TdxApWait:
   233 00000728 803D04B0800000      <1>     cmp     byte[TDX_WORK_AREA_PGTBL_READY], 0
   234 0000072F 74F7                <1>     je      TdxApWait
   235 00000731 EB10                <1>     jmp     ExitInitTdxWorkarea
   236                              <1> 
   237                              <1> TdxBspEntry:
   238                              <1>     ;
   239                              <1>     ; Set Type of WORK_AREA_GUEST_TYPE so that the following code can use
   240                              <1>     ; these information.
   241                              <1>     ;
   242 00000733 C60500B0800002      <1>     mov     byte[WORK_AREA_GUEST_TYPE], VM_GUEST_TDX
   243                              <1> 
   244                              <1>     ;
   245                              <1>     ; EBX[5:0] CPU supported GPA width
   246                              <1>     ;
   247 0000073A 83E33F              <1>     and     ebx, 0x3f
   248 0000073D 891D08B08000        <1>     mov     DWORD[TDX_WORK_AREA_GPAW], ebx
   249                              <1> 
   250                              <1> ExitInitTdxWorkarea:
   251                              <1>     OneTimeCallRet InitTdxWorkarea
    54 00000743 EB24                <2>  jmp %1 %+ OneTimerCallReturn
   252                              <1> 
   253                              <1> ;
   254                              <1> ; Load the GDT and set the CS/DS/ES/FS/GS/SS.
   255                              <1> ;
   256                              <1> ; Modified:  EAX, DS, ES, FS, GS, SS, CS
   257                              <1> ;
   258                              <1> ReloadFlat32:
   259                              <1> 
   260 00000745 FA                  <1>     cli
   261 00000746 B8D8FEFFFF          <1>     mov     eax, ADDR_OF(gdtr)
   262 0000074B 0F0110              <1>     lgdt    [eax]
   263                              <1> 
   264 0000074E EAF5FDFFFF1000      <1>     jmp     LINEAR_CODE_SEL:dword ADDR_OF(jumpToFlat32BitAndLandHere)
   265                              <1> 
   266                              <1> jumpToFlat32BitAndLandHere:
   267                              <1> 
   268                              <1>     debugShowPostCode POSTCODE_32BIT_MODE
   269                              <1> 
   270 00000755 66B80800            <1>     mov     ax, LINEAR_SEL
   271 00000759 8ED8                <1>     mov     ds, ax
   272 0000075B 8EC0                <1>     mov     es, ax
   273 0000075D 8EE0                <1>     mov     fs, ax
   274 0000075F 8EE8                <1>     mov     gs, ax
   275 00000761 8ED0                <1>     mov     ss, ax
   276                              <1> 
   277                              <1>     OneTimeCallRet ReloadFlat32
    54 00000763 EB02                <2>  jmp %1 %+ OneTimerCallReturn
   278                              <1> 
   279                              <1> ;
   280                              <1> ; Tdx initialization after entering into ResetVector
   281                              <1> ;
   282                              <1> ; Modified:  EAX, EBX, ECX, EDX, EBP, EDI, ESP
   283                              <1> ;
   284                              <1> InitTdx:
   285                              <1>     ;
   286                              <1>     ; First load the GDT and jump to Flat32 mode
   287                              <1>     ;
   288                              <1>     OneTimeCall ReloadFlat32
    49 00000765 EBDE                <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   289                              <1> 
   290                              <1>     ;
   291                              <1>     ; Initialization of Tdx work area
   292                              <1>     ;
   293                              <1>     OneTimeCall  InitTdxWorkarea
    49 00000767 EBB4                <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   294                              <1> 
   295                              <1>     OneTimeCallRet InitTdx
    54 00000769 E91B010000          <2>  jmp %1 %+ OneTimerCallReturn
   296                              <1> 
   297                              <1> ;
   298                              <1> ; Check TDX features, TDX or TDX-BSP or TDX-APs?
   299                              <1> ;
   300                              <1> ; By design TDX BSP is reponsible for initializing the PageTables.
   301                              <1> ; After PageTables are ready, byte[TDX_WORK_AREA_PGTBL_READY] is set to 1.
   302                              <1> ; APs will spin when byte[TDX_WORK_AREA_PGTBL_READY] is 0 until it is set to 1.
   303                              <1> ;
   304                              <1> ; When this routine is run on TDX BSP, byte[TDX_WORK_AREA_PGTBL_READY] should be 0.
   305                              <1> ; When this routine is run on TDX APs, byte[TDX_WORK_AREA_PGTBL_READY] should be 1.
   306                              <1> ;
   307                              <1> ;
   308                              <1> ; Modified:  EAX, EDX
   309                              <1> ;
   310                              <1> ; 0-NonTdx, 1-TdxBsp, 2-TdxAps
   311                              <1> ;
   312                              <1> CheckTdxFeaturesBeforeBuildPagetables:
   313 0000076E 31C0                <1>     xor     eax, eax
   314 00000770 803D00B0800002      <1>     cmp     byte[WORK_AREA_GUEST_TYPE], VM_GUEST_TDX
   315 00000777 7508                <1>     jne     NotTdx
   316                              <1> 
   317 00000779 31D2                <1>     xor     edx, edx
   318 0000077B A004B08000          <1>     mov     al, byte[TDX_WORK_AREA_PGTBL_READY]
   319 00000780 40                  <1>     inc     eax
   320                              <1> 
   321                              <1> NotTdx:
   322                              <1>     OneTimeCallRet CheckTdxFeaturesBeforeBuildPagetables
    54 00000781 E97FFEFFFF          <2>  jmp %1 %+ OneTimerCallReturn
   323                              <1> 
   324                              <1> ;
   325                              <1> ; Set byte[TDX_WORK_AREA_PGTBL_READY] to 1
   326                              <1> ;
   327                              <1> TdxPostBuildPageTables:
   328 00000786 803D00B0800002      <1>     cmp     byte[WORK_AREA_GUEST_TYPE], VM_GUEST_TDX
   329 0000078D 7507                <1>     jne     ExitTdxPostBuildPageTables
   330 0000078F C60504B0800001      <1>     mov     byte[TDX_WORK_AREA_PGTBL_READY], 1
   331                              <1> 
   332                              <1> ExitTdxPostBuildPageTables:
   333                              <1>     OneTimeCallRet TdxPostBuildPageTables
    54 00000796 E90CFFFFFF          <2>  jmp %1 %+ OneTimerCallReturn
   334                              <1> 
   335                              <1> ;
   336                              <1> ; Check if TDX is enabled
   337                              <1> ;
   338                              <1> ; Modified:  EAX
   339                              <1> ;
   340                              <1> ; If TDX is enabled then EAX will be 1
   341                              <1> ; If TDX is disabled then EAX will be 0.
   342                              <1> ;
   343                              <1> IsTdxEnabled:
   344 0000079B 31C0                <1>     xor     eax, eax
   345 0000079D 803D00B0800002      <1>     cmp     byte[WORK_AREA_GUEST_TYPE], VM_GUEST_TDX
   346 000007A4 7505                <1>     jne     TdxNotEnabled
   347 000007A6 B801000000          <1>     mov     eax, 1
   348                              <1> 
   349                              <1> TdxNotEnabled:
   350                              <1>     OneTimeCallRet IsTdxEnabled
    54 000007AB E966FAFFFF          <2>  jmp %1 %+ OneTimerCallReturn
   129                                  %include "X64/OvmfSevMetadata.asm"
   130                              <1> ;-----------------------------------------------------------------------------
   131                              <1> ; @file
   132                              <1> ; OVMF metadata for the AMD SEV confidential computing guests
   133                              <1> ;
   134                              <1> ; Copyright (c) 2021, AMD Inc. All rights reserved.<BR>
   135                              <1> ;
   136                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
   137                              <1> ;-----------------------------------------------------------------------------
   138                              <1> 
   139                              <1> BITS  64
   140                              <1> 
   141                              <1> %define OVMF_SEV_METADATA_VERSION     1
   142                              <1> 
   143                              <1> ; The section must be accepted or validated by the VMM before the boot
   144                              <1> %define OVMF_SECTION_TYPE_SNP_SEC_MEM     0x1
   145                              <1> 
   146                              <1> ; AMD SEV-SNP specific sections
   147                              <1> %define OVMF_SECTION_TYPE_SNP_SECRETS     0x2
   148                              <1> 
   149                              <1> ;
   150                              <1> ; The section contains the hypervisor pre-populated CPUID values.
   151                              <1> ; In the case of SEV-SNP, the CPUID values are filtered and measured by
   152                              <1> ; the SEV-SNP firmware.
   153                              <1> ; The CPUID format is documented in SEV-SNP firmware spec 0.9 section 7.1
   154                              <1> ; (CPUID function structure).
   155                              <1> ;
   156                              <1> %define OVMF_SECTION_TYPE_CPUID           0x3
   157                              <1> 
   158                              <1> 
   159                              <1> ALIGN 16
   160                              <1> 
   161 000007B0 00<rep 4h>          <1> TIMES (15 - ((OvmfSevGuidedStructureEnd - OvmfSevGuidedStructureStart + 15) % 16)) DB 0
   162                              <1> 
   163                              <1> OvmfSevGuidedStructureStart:
   164                              <1> ;
   165                              <1> ; OvmfSev metadata descriptor
   166                              <1> ;
   167                              <1> OvmfSevMetadataGuid:
   168                              <1> 
   169                              <1> _DescriptorSev:
   170 000007B4 41534556            <1>   DB 'A','S','E','V'                                        ; Signature
   171 000007B8 4C000000            <1>   DD OvmfSevGuidedStructureEnd - _DescriptorSev             ; Length
   172 000007BC 01000000            <1>   DD OVMF_SEV_METADATA_VERSION                              ; Version
   173 000007C0 05000000            <1>   DD (OvmfSevGuidedStructureEnd - _DescriptorSev - 16) / 12 ; Number of sections
   174                              <1> 
   175                              <1> ; Region need to be pre-validated by the hypervisor
   176                              <1> PreValidate1:
   177 000007C4 00008000            <1>   DD  SNP_SEC_MEM_BASE_DESC_1
   178 000007C8 00900000            <1>   DD  SNP_SEC_MEM_SIZE_DESC_1
   179 000007CC 01000000            <1>   DD  OVMF_SECTION_TYPE_SNP_SEC_MEM
   180                              <1> PreValidate2:
   181 000007D0 00A08000            <1>   DD  SNP_SEC_MEM_BASE_DESC_2
   182 000007D4 00300000            <1>   DD  SNP_SEC_MEM_SIZE_DESC_2
   183 000007D8 01000000            <1>   DD  OVMF_SECTION_TYPE_SNP_SEC_MEM
   184                              <1> 
   185                              <1> ; SEV-SNP Secrets page
   186                              <1> SevSnpSecrets:
   187 000007DC 00D08000            <1>   DD  SEV_SNP_SECRETS_BASE
   188 000007E0 00100000            <1>   DD  SEV_SNP_SECRETS_SIZE
   189 000007E4 02000000            <1>   DD  OVMF_SECTION_TYPE_SNP_SECRETS
   190                              <1> 
   191                              <1> ; CPUID values
   192                              <1> CpuidSec:
   193 000007E8 00E08000            <1>   DD  CPUID_BASE
   194 000007EC 00100000            <1>   DD  CPUID_SIZE
   195 000007F0 03000000            <1>   DD  OVMF_SECTION_TYPE_CPUID
   196                              <1> 
   197                              <1> ; Region need to be pre-validated by the hypervisor
   198                              <1> PreValidate3:
   199 000007F4 00F08000            <1>   DD  SNP_SEC_MEM_BASE_DESC_3
   200 000007F8 00100100            <1>   DD  SNP_SEC_MEM_SIZE_DESC_3
   201 000007FC 01000000            <1>   DD  OVMF_SECTION_TYPE_SNP_SEC_MEM
   202                              <1> OvmfSevGuidedStructureEnd:
   203                              <1>   ALIGN   16
   130                                  %endif
   131                                  
   132                                  %include "Ia16/Real16ToFlat32.asm"
   133                              <1> ;------------------------------------------------------------------------------
   134                              <1> ; @file
   135                              <1> ; Transition from 16 bit real mode into 32 bit flat protected mode
   136                              <1> ;
   137                              <1> ; Copyright (c) 2008 - 2010, Intel Corporation. All rights reserved.<BR>
   138                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
   139                              <1> ;
   140                              <1> ;------------------------------------------------------------------------------
   141                              <1> 
   142                              <1> %define SEC_DEFAULT_CR0  0x40000023
   143                              <1> %define SEC_DEFAULT_CR4  0x640
   144                              <1> 
   145                              <1> BITS    16
   146                              <1> 
   147                              <1> ;
   148                              <1> ; Modified:  EAX, EBX
   149                              <1> ;
   150                              <1> ; @param[out]     DS       Selector allowing flat access to all addresses
   151                              <1> ; @param[out]     ES       Selector allowing flat access to all addresses
   152                              <1> ; @param[out]     FS       Selector allowing flat access to all addresses
   153                              <1> ; @param[out]     GS       Selector allowing flat access to all addresses
   154                              <1> ; @param[out]     SS       Selector allowing flat access to all addresses
   155                              <1> ;
   156                              <1> TransitionFromReal16To32BitFlat:
   157                              <1> 
   158                              <1>     debugShowPostCode POSTCODE_16BIT_MODE
   159                              <1> 
   160 00000800 FA                  <1>     cli
   161                              <1> 
   162 00000801 BB00F0              <1>     mov     bx, 0xf000
   163 00000804 8EDB                <1>     mov     ds, bx
   164                              <1> 
   165 00000806 BBD8FE              <1>     mov     bx, ADDR16_OF(gdtr)
   166                              <1> 
   167 00000809 2E660F0117          <1> o32 lgdt    [cs:bx]
   168                              <1> 
   169 0000080E 66B823000040        <1>     mov     eax, SEC_DEFAULT_CR0
   170 00000814 0F22C0              <1>     mov     cr0, eax
   171                              <1> 
   172 00000817 66EABFFEFFFF1000    <1>     jmp     LINEAR_CODE_SEL:dword ADDR_OF(jumpTo32BitAndLandHere)
   173                              <1> BITS    32
   174                              <1> jumpTo32BitAndLandHere:
   175                              <1> 
   176 0000081F B840060000          <1>     mov     eax, SEC_DEFAULT_CR4
   177 00000824 0F22E0              <1>     mov     cr4, eax
   178                              <1> 
   179                              <1>     debugShowPostCode POSTCODE_32BIT_MODE
   180                              <1> 
   181 00000827 66B80800            <1>     mov     ax, LINEAR_SEL
   182 0000082B 8ED8                <1>     mov     ds, ax
   183 0000082D 8EC0                <1>     mov     es, ax
   184 0000082F 8EE0                <1>     mov     fs, ax
   185 00000831 8EE8                <1>     mov     gs, ax
   186 00000833 8ED0                <1>     mov     ss, ax
   187                              <1> 
   188                              <1>     OneTimeCallRet TransitionFromReal16To32BitFlat
    54 00000835 EB44                <2>  jmp %1 %+ OneTimerCallReturn
   189                              <1> 
   190 00000837 90                  <1> ALIGN   2
   191                              <1> 
   192                              <1> gdtr:
   193 00000838 2700                <1>     dw      GDT_END - GDT_BASE - 1   ; GDT limit
   194 0000083A E0FEFFFF            <1>     dd      ADDR_OF(GDT_BASE)
   195                              <1> 
   196 0000083E 90<rep 2h>          <1> ALIGN   16
   197                              <1> 
   198                              <1> ;
   199                              <1> ; Macros for GDT entries
   200                              <1> ;
   201                              <1> 
   202                              <1> %define  PRESENT_FLAG(p) (p << 7)
   203                              <1> %define  DPL(dpl) (dpl << 5)
   204                              <1> %define  SYSTEM_FLAG(s) (s << 4)
   205                              <1> %define  DESC_TYPE(t) (t)
   206                              <1> 
   207                              <1> ; Type: data, expand-up, writable, accessed
   208                              <1> %define  DATA32_TYPE 3
   209                              <1> 
   210                              <1> ; Type: execute, readable, expand-up, accessed
   211                              <1> %define  CODE32_TYPE 0xb
   212                              <1> 
   213                              <1> ; Type: execute, readable, expand-up, accessed
   214                              <1> %define  CODE64_TYPE 0xb
   215                              <1> 
   216                              <1> %define  GRANULARITY_FLAG(g) (g << 7)
   217                              <1> %define  DEFAULT_SIZE32(d) (d << 6)
   218                              <1> %define  CODE64_FLAG(l) (l << 5)
   219                              <1> %define  UPPER_LIMIT(l) (l)
   220                              <1> 
   221                              <1> ;
   222                              <1> ; The Global Descriptor Table (GDT)
   223                              <1> ;
   224                              <1> 
   225                              <1> GDT_BASE:
   226                              <1> ; null descriptor
   227                              <1> NULL_SEL            equ $-GDT_BASE
   228 00000840 0000                <1>     DW      0            ; limit 15:0
   229 00000842 0000                <1>     DW      0            ; base 15:0
   230 00000844 00                  <1>     DB      0            ; base 23:16
   231 00000845 00                  <1>     DB      0            ; sys flag, dpl, type
   232 00000846 00                  <1>     DB      0            ; limit 19:16, flags
   233 00000847 00                  <1>     DB      0            ; base 31:24
   234                              <1> 
   235                              <1> ; linear data segment descriptor
   236                              <1> LINEAR_SEL          equ $-GDT_BASE
   237 00000848 FFFF                <1>     DW      0xffff       ; limit 15:0
   238 0000084A 0000                <1>     DW      0            ; base 15:0
   239 0000084C 00                  <1>     DB      0            ; base 23:16
   240 0000084D 93                  <1>     DB      PRESENT_FLAG(1)|DPL(0)|SYSTEM_FLAG(1)|DESC_TYPE(DATA32_TYPE)
   241 0000084E CF                  <1>     DB      GRANULARITY_FLAG(1)|DEFAULT_SIZE32(1)|CODE64_FLAG(0)|UPPER_LIMIT(0xf)
   242 0000084F 00                  <1>     DB      0            ; base 31:24
   243                              <1> 
   244                              <1> ; linear code segment descriptor
   245                              <1> LINEAR_CODE_SEL     equ $-GDT_BASE
   246 00000850 FFFF                <1>     DW      0xffff       ; limit 15:0
   247 00000852 0000                <1>     DW      0            ; base 15:0
   248 00000854 00                  <1>     DB      0            ; base 23:16
   249 00000855 9B                  <1>     DB      PRESENT_FLAG(1)|DPL(0)|SYSTEM_FLAG(1)|DESC_TYPE(CODE32_TYPE)
   250 00000856 CF                  <1>     DB      GRANULARITY_FLAG(1)|DEFAULT_SIZE32(1)|CODE64_FLAG(0)|UPPER_LIMIT(0xf)
   251 00000857 00                  <1>     DB      0            ; base 31:24
   252                              <1> 
   253                              <1> %ifdef ARCH_X64
   254                              <1> ; linear code (64-bit) segment descriptor
   255                              <1> LINEAR_CODE64_SEL   equ $-GDT_BASE
   256 00000858 FFFF                <1>     DW      0xffff       ; limit 15:0
   257 0000085A 0000                <1>     DW      0            ; base 15:0
   258 0000085C 00                  <1>     DB      0            ; base 23:16
   259 0000085D 9B                  <1>     DB      PRESENT_FLAG(1)|DPL(0)|SYSTEM_FLAG(1)|DESC_TYPE(CODE64_TYPE)
   260 0000085E AF                  <1>     DB      GRANULARITY_FLAG(1)|DEFAULT_SIZE32(0)|CODE64_FLAG(1)|UPPER_LIMIT(0xf)
   261 0000085F 00                  <1>     DB      0            ; base 31:24
   262                              <1> %endif
   263                              <1> 
   264                              <1> ; linear code segment descriptor
   265                              <1> LINEAR_CODE16_SEL     equ $-GDT_BASE
   266 00000860 FFFF                <1>     DW      0xffff       ; limit 15:0
   267 00000862 0000                <1>     DW      0            ; base 15:0
   268 00000864 00                  <1>     DB      0            ; base 23:16
   269 00000865 9B                  <1>     DB      PRESENT_FLAG(1)|DPL(0)|SYSTEM_FLAG(1)|DESC_TYPE(CODE32_TYPE)
   270 00000866 8F                  <1>     DB      GRANULARITY_FLAG(1)|DEFAULT_SIZE32(0)|CODE64_FLAG(0)|UPPER_LIMIT(0xf)
   271 00000867 00                  <1>     DB      0            ; base 31:24
   272                              <1> 
   273                              <1> GDT_END:
   274                              <1> 
   133                                  %include "Ia16/Init16.asm"
   134                              <1> ;------------------------------------------------------------------------------
   135                              <1> ; @file
   136                              <1> ; 16-bit initialization code
   137                              <1> ;
   138                              <1> ; Copyright (c) 2008 - 2009, Intel Corporation. All rights reserved.<BR>
   139                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
   140                              <1> ;
   141                              <1> ;------------------------------------------------------------------------------
   142                              <1> 
   143                              <1> 
   144                              <1> BITS    16
   145                              <1> 
   146                              <1> ;
   147                              <1> ; @param[out] DI    'BP' to indicate boot-strap processor
   148                              <1> ;
   149                              <1> EarlyBspInitReal16:
   150 00000868 BF4250              <1>     mov     di, 'BP'
   151 0000086B EB0A                <1>     jmp     short Main16
   152                              <1> 
   153                              <1> ;
   154                              <1> ; @param[out] DI    'AP' to indicate application processor
   155                              <1> ;
   156                              <1> EarlyApInitReal16:
   157 0000086D BF4150              <1>     mov     di, 'AP'
   158 00000870 EB05                <1>     jmp     short Main16
   159                              <1> 
   160                              <1> ;
   161                              <1> ; Modified:  EAX
   162                              <1> ;
   163                              <1> ; @param[in]  EAX   Initial value of the EAX register (BIST: Built-in Self Test)
   164                              <1> ; @param[out] ESP   Initial value of the EAX register (BIST: Built-in Self Test)
   165                              <1> ;
   166                              <1> EarlyInit16:
   167                              <1>     ;
   168                              <1>     ; ESP -  Initial value of the EAX register (BIST: Built-in Self Test)
   169                              <1>     ;
   170 00000872 6689C4              <1>     mov     esp, eax
   171                              <1> 
   172                              <1>     debugInitialize
    57                              <2> 
    58                              <2> 
    59                              <2> 
   173                              <1> 
   174                              <1>     OneTimeCallRet EarlyInit16
    54 00000875 EB02                <2>  jmp %1 %+ OneTimerCallReturn
   175                              <1> 
   134                                  
   135                                  %include "Main.asm"
   136                              <1> ;------------------------------------------------------------------------------
   137                              <1> ; @file
   138                              <1> ; Main routine of the pre-SEC code up through the jump into SEC
   139                              <1> ;
   140                              <1> ; Copyright (c) 2008 - 2009, Intel Corporation. All rights reserved.<BR>
   141                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
   142                              <1> ;
   143                              <1> ;------------------------------------------------------------------------------
   144                              <1> 
   145                              <1> 
   146                              <1> BITS    16
   147                              <1> 
   148                              <1> ;
   149                              <1> ; Modified:  EBX, ECX, EDX, EBP
   150                              <1> ;
   151                              <1> ; @param[in,out]  RAX/EAX  Initial value of the EAX register
   152                              <1> ;                          (BIST: Built-in Self Test)
   153                              <1> ; @param[in,out]  DI       'BP': boot-strap processor, or
   154                              <1> ;                          'AP': application processor
   155                              <1> ; @param[out]     RBP/EBP  Address of Boot Firmware Volume (BFV)
   156                              <1> ; @param[out]     DS       Selector allowing flat access to all addresses
   157                              <1> ; @param[out]     ES       Selector allowing flat access to all addresses
   158                              <1> ; @param[out]     FS       Selector allowing flat access to all addresses
   159                              <1> ; @param[out]     GS       Selector allowing flat access to all addresses
   160                              <1> ; @param[out]     SS       Selector allowing flat access to all addresses
   161                              <1> ;
   162                              <1> ; @return         None  This routine jumps to SEC and does not return
   163                              <1> ;
   164                              <1> Main16:
   165                              <1>     OneTimeCall EarlyInit16
    49 00000877 EBF9                <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   166                              <1> 
   167                              <1>     ;
   168                              <1>     ; Transition the processor from 16-bit real mode to 32-bit flat mode
   169                              <1>     ;
   170                              <1>     OneTimeCall TransitionFromReal16To32BitFlat
    49 00000879 EB85                <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   171                              <1> 
   172                              <1> BITS    32
   173                              <1> 
   174                              <1>     ; Clear the WorkArea header. The SEV probe routines will populate the
   175                              <1>     ; work area when detected.
   176 0000087B C60500B0800000      <1>     mov     byte[WORK_AREA_GUEST_TYPE], 0
   177                              <1> 
   178                              <1> %ifdef ARCH_X64
   179                              <1> 
   180 00000882 EB05                <1>     jmp SearchBfv
   181                              <1> 
   182                              <1> ;
   183                              <1> ; Entry point of Main32
   184                              <1> ;
   185                              <1> Main32:
   186                              <1>     OneTimeCall InitTdx
    49 00000884 E9DCFEFFFF          <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   187                              <1> 
   188                              <1> SearchBfv:
   189                              <1> 
   190                              <1> %endif
   191                              <1> 
   192                              <1>     ;
   193                              <1>     ; Search for the Boot Firmware Volume (BFV)
   194                              <1>     ;
   195                              <1>     OneTimeCall Flat32SearchForBfvBase
    49 00000889 E972F7FFFF          <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   196                              <1> 
   197                              <1>     ;
   198                              <1>     ; EBP - Start of BFV
   199                              <1>     ;
   200                              <1> 
   201                              <1>     ;
   202                              <1>     ; Search for the SEC entry point
   203                              <1>     ;
   204                              <1>     OneTimeCall Flat32SearchForSecEntryPoint
    49 0000088E E9BEF7FFFF          <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   205                              <1> 
   206                              <1>     ;
   207                              <1>     ; ESI - SEC Core entry point
   208                              <1>     ; EBP - Start of BFV
   209                              <1>     ;
   210                              <1> 
   211                              <1> %ifdef ARCH_IA32
   212                              <1> 
   213                              <1>     ;
   214                              <1>     ; Restore initial EAX value into the EAX register
   215                              <1>     ;
   216                              <1>     mov     eax, esp
   217                              <1> 
   218                              <1>     ;
   219                              <1>     ; Jump to the 32-bit SEC entry point
   220                              <1>     ;
   221                              <1>     jmp     esi
   222                              <1> 
   223                              <1> %else
   224                              <1> 
   225                              <1>     ;
   226                              <1>     ; Transition the processor from 32-bit flat mode to 64-bit flat mode
   227                              <1>     ;
   228                              <1>     OneTimeCall Transition32FlatTo64Flat
    49 00000893 E968F9FFFF          <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   229                              <1> 
   230                              <1> BITS    64
   231                              <1> 
   232                              <1>     ;
   233                              <1>     ; Some values were calculated in 32-bit mode.  Make sure the upper
   234                              <1>     ; 32-bits of 64-bit registers are zero for these values.
   235                              <1>     ;
   236 00000898 B8FFFFFFFF          <1>     mov     rax, 0x00000000ffffffff
   237 0000089D 4821C6              <1>     and     rsi, rax
   238 000008A0 4821C5              <1>     and     rbp, rax
   239 000008A3 4821C4              <1>     and     rsp, rax
   240                              <1> 
   241                              <1>     ;
   242                              <1>     ; RSI - SEC Core entry point
   243                              <1>     ; RBP - Start of BFV
   244                              <1>     ;
   245                              <1> 
   246                              <1>     ;
   247                              <1>     ; Restore initial EAX value into the RAX register
   248                              <1>     ;
   249 000008A6 4889E0              <1>     mov     rax, rsp
   250                              <1> 
   251                              <1>     ;
   252                              <1>     ; Jump to the 64-bit SEC entry point
   253                              <1>     ;
   254 000008A9 FFE6                <1>     jmp     rsi
   255                              <1> 
   256                              <1> %endif
   136                                  
   137                                    %define SEV_ES_AP_RESET_IP  8433668
   138                                    %define SEV_LAUNCH_SECRET_BASE  00h
   139                                    %define SEV_LAUNCH_SECRET_SIZE  00h
   140                                    %define SEV_FW_HASH_BLOCK_BASE  00h
   141                                    %define SEV_FW_HASH_BLOCK_SIZE  00h
   142                                  %include "Ia16/ResetVectorVtf0.asm"
   143                              <1> ;------------------------------------------------------------------------------
   144                              <1> ; @file
   145                              <1> ; First code executed by processor after resetting.
   146                              <1> ; Derived from UefiCpuPkg/ResetVector/Vtf0/Ia16/ResetVectorVtf0.asm
   147                              <1> ;
   148                              <1> ; Copyright (c) 2008 - 2014, Intel Corporation. All rights reserved.<BR>
   149                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
   150                              <1> ;
   151                              <1> ;------------------------------------------------------------------------------
   152                              <1> 
   153                              <1> BITS    16
   154                              <1> 
   155 000008AB 90<rep 5h>          <1> ALIGN   16
   156                              <1> 
   157                              <1> ;
   158                              <1> ; Pad the image size to 4k when page tables are in VTF0
   159                              <1> ;
   160                              <1> ; If the VTF0 image has page tables built in, then we need to make
   161                              <1> ; sure the end of VTF0 is 4k above where the page tables end.
   162                              <1> ;
   163                              <1> ; This is required so the page tables will be 4k aligned when VTF0 is
   164                              <1> ; located just below 0x100000000 (4GB) in the firmware device.
   165                              <1> ;
   166                              <1> %ifdef ALIGN_TOP_TO_4K_FOR_PAGING
   167                              <1>     TIMES (0x1000 - ($ - EndOfPageTables) - 0x20) DB 0
   168                              <1> %endif
   169                              <1> 
   170                              <1> ;
   171                              <1> ; Padding to ensure first guid starts at 0xffffffd0
   172                              <1> ;
   173 000008B0 00<rep 8h>          <1> TIMES (15 - ((guidedStructureEnd - guidedStructureStart + 15) % 16)) DB 0
   174                              <1> 
   175                              <1> ; GUIDed structure.  To traverse this you should first verify the
   176                              <1> ; presence of the table footer guid
   177                              <1> ; (96b582de-1fb2-45f7-baea-a366c55a082d) at 0xffffffd0.  If that
   178                              <1> ; is found, the two bytes at 0xffffffce are the entire table length.
   179                              <1> ;
   180                              <1> ; The table is composed of structures with the form:
   181                              <1> ;
   182                              <1> ; Data (arbitrary bytes identified by guid)
   183                              <1> ; length from start of data to end of guid (2 bytes)
   184                              <1> ; guid (16 bytes)
   185                              <1> ;
   186                              <1> ; so work back from the footer using the length to traverse until you
   187                              <1> ; either find the guid you're looking for or run off the beginning of
   188                              <1> ; the table.
   189                              <1> ;
   190                              <1> guidedStructureStart:
   191                              <1> 
   192                              <1> %ifdef ARCH_X64
   193                              <1> ;
   194                              <1> ; TDX Metadata offset block
   195                              <1> ;
   196                              <1> ; TdxMetadata.asm is included in ARCH_X64 because Inte TDX is only
   197                              <1> ; available in ARCH_X64. Below block describes the offset of
   198                              <1> ; TdxMetadata block in Ovmf image
   199                              <1> ;
   200                              <1> ; GUID : e47a6535-984a-4798-865e-4685a7bf8ec2
   201                              <1> ;
   202                              <1> tdxMetadataOffsetStart:
   203 000008B8 30080000            <1>     DD      fourGigabytes - TdxMetadataGuid - 16
   204 000008BC 1600                <1>     DW      tdxMetadataOffsetEnd - tdxMetadataOffsetStart
   205 000008BE 35657AE44A989847    <1>     DB      0x35, 0x65, 0x7a, 0xe4, 0x4a, 0x98, 0x98, 0x47
   206 000008C6 865E4685A7BF8EC2    <1>     DB      0x86, 0x5e, 0x46, 0x85, 0xa7, 0xbf, 0x8e, 0xc2
   207                              <1> tdxMetadataOffsetEnd:
   208                              <1> 
   209                              <1> ;
   210                              <1> ; SEV metadata descriptor
   211                              <1> ;
   212                              <1> ; Provide the start offset of the metadata blob within the OVMF binary.
   213                              <1> 
   214                              <1> ; GUID : dc886566-984a-4798-A75e-5585a7bf67cc
   215                              <1> ;
   216                              <1> OvmfSevMetadataOffsetStart:
   217 000008CE AC010000            <1>   DD      (fourGigabytes - OvmfSevMetadataGuid)
   218 000008D2 1600                <1>   DW      OvmfSevMetadataOffsetEnd - OvmfSevMetadataOffsetStart
   219 000008D4 666588DC4A989847    <1>   DB      0x66, 0x65, 0x88, 0xdc, 0x4a, 0x98, 0x98, 0x47
   220 000008DC A75E5585A7BF67CC    <1>   DB      0xA7, 0x5e, 0x55, 0x85, 0xa7, 0xbf, 0x67, 0xcc
   221                              <1> OvmfSevMetadataOffsetEnd:
   222                              <1> 
   223                              <1> %endif
   224                              <1> 
   225                              <1> ; SEV Hash Table Block
   226                              <1> ;
   227                              <1> ; This describes the guest ram area where the hypervisor should
   228                              <1> ; install a table describing the hashes of certain firmware configuration
   229                              <1> ; device files that would otherwise be passed in unchecked.  The current
   230                              <1> ; use is for the kernel, initrd and command line values, but others may be
   231                              <1> ; added.  The data format is:
   232                              <1> ;
   233                              <1> ; base physical address (32 bit word)
   234                              <1> ; table length (32 bit word)
   235                              <1> ;
   236                              <1> ; GUID (SEV FW config hash block): 7255371f-3a3b-4b04-927b-1da6efa8d454
   237                              <1> ;
   238                              <1> sevFwHashBlockStart:
   239 000008E4 00000000            <1>     DD      SEV_FW_HASH_BLOCK_BASE
   240 000008E8 00000000            <1>     DD      SEV_FW_HASH_BLOCK_SIZE
   241 000008EC 1A00                <1>     DW      sevFwHashBlockEnd - sevFwHashBlockStart
   242 000008EE 1F3755723B3A044B    <1>     DB      0x1f, 0x37, 0x55, 0x72, 0x3b, 0x3a, 0x04, 0x4b
   243 000008F6 927B1DA6EFA8D454    <1>     DB      0x92, 0x7b, 0x1d, 0xa6, 0xef, 0xa8, 0xd4, 0x54
   244                              <1> sevFwHashBlockEnd:
   245                              <1> 
   246                              <1> ; SEV Secret block
   247                              <1> ;
   248                              <1> ; This describes the guest ram area where the hypervisor should
   249                              <1> ; inject the secret.  The data format is:
   250                              <1> ;
   251                              <1> ; base physical address (32 bit word)
   252                              <1> ; table length (32 bit word)
   253                              <1> ;
   254                              <1> ; GUID (SEV secret block): 4c2eb361-7d9b-4cc3-8081-127c90d3d294
   255                              <1> ;
   256                              <1> sevSecretBlockStart:
   257 000008FE 00000000            <1>     DD      SEV_LAUNCH_SECRET_BASE
   258 00000902 00000000            <1>     DD      SEV_LAUNCH_SECRET_SIZE
   259 00000906 1A00                <1>     DW      sevSecretBlockEnd - sevSecretBlockStart
   260 00000908 61B32E4C9B7DC34C    <1>     DB      0x61, 0xB3, 0x2E, 0x4C, 0x9B, 0x7D, 0xC3, 0x4C
   261 00000910 8081127C90D3D294    <1>     DB      0x80, 0x81, 0x12, 0x7C, 0x90, 0xD3, 0xD2, 0x94
   262                              <1> sevSecretBlockEnd:
   263                              <1> 
   264                              <1> ;
   265                              <1> ; SEV-ES Processor Reset support
   266                              <1> ;
   267                              <1> ; sevEsResetBlock:
   268                              <1> ;   For the initial boot of an AP under SEV-ES, the "reset" RIP must be
   269                              <1> ;   programmed to the RAM area defined by SEV_ES_AP_RESET_IP. The data
   270                              <1> ;   format is:
   271                              <1> ;
   272                              <1> ;   IP value [0:15]
   273                              <1> ;   CS segment base [31:16]
   274                              <1> ;
   275                              <1> ;   GUID (SEV-ES reset block): 00f771de-1a7e-4fcb-890e-68c77e2fb44e
   276                              <1> ;
   277                              <1> ;   A hypervisor reads the CS segement base and IP value. The CS segment base
   278                              <1> ;   value represents the high order 16-bits of the CS segment base, so the
   279                              <1> ;   hypervisor must left shift the value of the CS segement base by 16 bits to
   280                              <1> ;   form the full CS segment base for the CS segment register. It would then
   281                              <1> ;   program the EIP register with the IP value as read.
   282                              <1> ;
   283                              <1> 
   284                              <1> sevEsResetBlockStart:
   285 00000918 04B08000            <1>     DD      SEV_ES_AP_RESET_IP
   286 0000091C 1600                <1>     DW      sevEsResetBlockEnd - sevEsResetBlockStart
   287 0000091E DE71F7007E1ACB4F    <1>     DB      0xDE, 0x71, 0xF7, 0x00, 0x7E, 0x1A, 0xCB, 0x4F
   288 00000926 890E68C77E2FB44E    <1>     DB      0x89, 0x0E, 0x68, 0xC7, 0x7E, 0x2F, 0xB4, 0x4E
   289                              <1> sevEsResetBlockEnd:
   290                              <1> 
   291                              <1> ;
   292                              <1> ; Table footer:
   293                              <1> ;
   294                              <1> ; length of whole table (16 bit word)
   295                              <1> ; GUID (table footer): 96b582de-1fb2-45f7-baea-a366c55a082d
   296                              <1> ;
   297 0000092E 8800                <1>     DW      guidedStructureEnd - guidedStructureStart
   298 00000930 DE82B596B21FF745    <1>     DB      0xDE, 0x82, 0xB5, 0x96, 0xB2, 0x1F, 0xF7, 0x45
   299 00000938 BAEAA366C55A082D    <1>     DB      0xBA, 0xEA, 0xA3, 0x66, 0xC5, 0x5A, 0x08, 0x2D
   300                              <1> 
   301                              <1> guidedStructureEnd:
   302                              <1> 
   303                              <1> ALIGN   16
   304                              <1> 
   305                              <1> applicationProcessorEntryPoint:
   306                              <1> ;
   307                              <1> ; Application Processors entry point
   308                              <1> ;
   309                              <1> ; GenFv generates code aligned on a 4k boundary which will jump to this
   310                              <1> ; location.  (0xffffffe0)  This allows the Local APIC Startup IPI to be
   311                              <1> ; used to wake up the application processors.
   312                              <1> ;
   313 00000940 E92AFF              <1>     jmp     EarlyApInitReal16
   314                              <1> 
   315 00000943 90<rep 5h>          <1> ALIGN   8
   316                              <1> 
   317 00000948 00000000            <1>     DD      0
   318                              <1> 
   319                              <1> ;
   320                              <1> ; The VTF signature
   321                              <1> ;
   322                              <1> ; VTF-0 means that the VTF (Volume Top File) code does not require
   323                              <1> ; any fixups.
   324                              <1> ;
   325                              <1> vtfSignature:
   326 0000094C 56544600            <1>     DB      'V', 'T', 'F', 0
   327                              <1> 
   328                              <1> ALIGN   16
   329                              <1> 
   330                              <1> resetVector:
   331                              <1> ;
   332                              <1> ; Reset Vector
   333                              <1> ;
   334                              <1> ; This is where the processor will begin execution
   335                              <1> ;
   336                              <1> ; In IA32 we follow the standard reset vector flow. While in X64, Td guest
   337                              <1> ; may be supported. Td guest requires the startup mode to be 32-bit
   338                              <1> ; protected mode but the legacy VM startup mode is 16-bit real mode.
   339                              <1> ; To make NASM generate such shared entry code that behaves correctly in
   340                              <1> ; both 16-bit and 32-bit mode, more BITS directives are added.
   341                              <1> ;
   342                              <1> %ifdef ARCH_IA32
   343                              <1>     nop
   344                              <1>     nop
   345                              <1>     jmp     EarlyBspInitReal16
   346                              <1> 
   347                              <1> %else
   348                              <1> 
   349 00000950 0F20C0              <1>     mov     eax, cr0
   350 00000953 A801                <1>     test    al, 1
   351 00000955 7405                <1>     jz      .Real
   352                              <1> BITS 32
   353 00000957 E928FFFFFF          <1>     jmp     Main32
   354                              <1> BITS 16
   355                              <1> .Real:
   356 0000095C E909FF              <1>     jmp     EarlyBspInitReal16
   357                              <1> 
   358                              <1> %endif
   359                              <1> 
   360 0000095F 90                  <1> ALIGN   16
   361                              <1> 
   362                              <1> fourGigabytes:
   363                              <1> 
   143                                  
